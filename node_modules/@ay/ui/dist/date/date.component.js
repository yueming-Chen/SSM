var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Component, ContentChild, ViewChild, Input, Output, EventEmitter, ViewEncapsulation } from '@angular/core';
import { defaults, bind } from "@ay/util/dist";
import * as moment from "moment";
import * as _ from "lodash";
var DateComponent = (function () {
    //- 事件
    function DateComponent() {
        //- 公有變數
        this.datepicker = this;
        this.years = null;
        this.months = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
        this.momthString = ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'];
        this.weekdayString = ['日', '一', '二', '三', '四', '五', '六'];
        //- 參數
        this.minYear = null;
        this.maxYear = null;
        this.format = "YYYY/MM/DD";
        this.weeksChange = new EventEmitter();
        /** year */
        this._year = moment().year();
        this.yearChange = new EventEmitter();
        /** month */
        this._month = moment().month();
        this.monthChange = new EventEmitter();
        /** date */
        this._date = [];
        this.dateChange = new EventEmitter();
        /** data */
        this._data = [];
        this.dataChange = new EventEmitter();
        /** selectable */
        this._selectable = function (a) { return true; };
        this.selectableChange = new EventEmitter();
        this.multiChange = new EventEmitter();
        this.isContinueChange = new EventEmitter();
        //- 樣板
        /** header */
        this.defaultHeaderTemplate = null;
        this.headerTemplate = null;
        /** Year */
        this.defaultYearTemplate = null;
        this.yearTemplate = null;
        /** YearDropdownDisplay */
        this.defaultYearDropdownDisplayTemplate = null;
        this.yearDropdownDisplayTemplate = null;
        /** YearDropdownItem */
        this.defaultYearDropdownItemTemplate = null;
        this.yearDropdownItemTemplate = null;
        /** Month */
        this.defaultMonthTemplate = null;
        this.monthTemplate = null;
        /** MonthDropdownDisplay */
        this.defaultMonthDropdownDisplayTemplate = null;
        this.monthDropdownDisplayTemplate = null;
        /** MonthDropdownItem */
        this.defaultMonthDropdownItemTemplate = null;
        this.monthDropdownItemTemplate = null;
        /** Day */
        this.defaultDayTemplate = null;
        this.dayTemplate = null;
        /** Weeks */
        this.defaultWeeksTemplate = null;
        this.weeksTemplate = null;
        /** Weekday */
        this.defaultWeekdayTemplate = null;
        this.weekdayTemplate = null;
    }
    Object.defineProperty(DateComponent.prototype, "weeks", {
        get: function () {
            return this._weeks;
        },
        set: function (weeks) {
            if (this._weeks === weeks)
                return;
            this._weeks = weeks;
            this.weeksChange.emit(this._weeks);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateComponent.prototype, "year", {
        get: function () {
            return this._year;
        },
        set: function (year) {
            if (this._year === year)
                return;
            this._year = year;
            this.yearChange.emit(this._year);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateComponent.prototype, "month", {
        get: function () {
            return this._month;
        },
        set: function (month) {
            if (this._month === month)
                return;
            this._month = month;
            this.monthChange.emit(this._month);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateComponent.prototype, "date", {
        get: function () {
            return this._date;
        },
        set: function (date) {
            if (this._date === date)
                return;
            this._date = date;
            this.dateChange.emit(this._date);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateComponent.prototype, "data", {
        get: function () {
            return this._data;
        },
        set: function (data) {
            if (this._data === data)
                return;
            this._data = data;
            this.dataChange.emit(this._data);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateComponent.prototype, "selectable", {
        get: function () {
            return this._selectable;
        },
        set: function (selectable) {
            if (this._selectable === selectable)
                return;
            this._selectable = selectable;
            this.selectableChange.emit(this._selectable);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateComponent.prototype, "multi", {
        get: function () {
            return this._multi;
        },
        set: function (isMulti) {
            if (this._multi === isMulti)
                return;
            this._multi = isMulti;
            this.multiChange.emit(this._multi);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateComponent.prototype, "isContinue", {
        get: function () {
            return this._isContinue;
        },
        set: function (isContinue) {
            if (this._isContinue === isContinue)
                return;
            this._isContinue = isContinue;
            this.isContinueChange.emit(this._isContinue);
        },
        enumerable: true,
        configurable: true
    });
    DateComponent.prototype.ngAfterContentInit = function () {
        this.headerTemplate = defaults(this.headerTemplate, this.defaultHeaderTemplate);
        this.yearTemplate = defaults(this.yearTemplate, this.defaultYearTemplate);
        this.yearDropdownDisplayTemplate = defaults(this.yearDropdownDisplayTemplate, this.defaultYearDropdownDisplayTemplate);
        this.yearDropdownItemTemplate = defaults(this.yearDropdownItemTemplate, this.defaultYearDropdownItemTemplate);
        this.monthTemplate = defaults(this.monthTemplate, this.defaultMonthTemplate);
        this.monthDropdownDisplayTemplate = defaults(this.monthDropdownDisplayTemplate, this.defaultMonthDropdownDisplayTemplate);
        this.monthDropdownItemTemplate = defaults(this.monthDropdownItemTemplate, this.defaultMonthDropdownItemTemplate);
        this.weeksTemplate = defaults(this.weeksTemplate, this.defaultWeeksTemplate);
        this.weekdayTemplate = defaults(this.weekdayTemplate, this.defaultWeekdayTemplate);
        this.dayTemplate = defaults(this.dayTemplate, this.defaultDayTemplate);
        var thisYear = moment().year();
        if (this.minYear === null) {
            this.minYear = thisYear - 100;
        }
        if (this.maxYear === null) {
            this.maxYear = thisYear + 100;
        }
        this.years = _.range(this.minYear, this.maxYear, 1).map(function (year) { return year.toString(); });
        this._ymChange$ = this.yearChange
            .merge(this.monthChange)
            .debounceTime(100)
            .subscribe(this.afterYMChange, this.onError);
        this.afterYMChange();
        this._dateChange$ = this.dateChange
            .debounceTime(100)
            .subscribe(this.afterDateChange, this.onError);
        this.initYearAndMonthFromData();
    };
    DateComponent.prototype.ngOnDestroy = function () {
        this._ymChange$.unsubscribe();
        this._dateChange$.unsubscribe();
    };
    DateComponent.prototype.afterDateChange = function () {
        var _this = this;
        this.data = this.date.map(function (date) { return date.format(_this.format); });
        this.recalcIsSelected();
    };
    DateComponent.prototype.afterYMChange = function () {
        this.weeks = [];
        var week = [];
        var start = moment().year(this.year).month(this.month).date(1);
        var today = moment().format("YYYYMMDD");
        while (start.day() !== 0) {
            start.subtract(1, 'day');
        }
        do {
            var cloned = start.clone();
            cloned.isSameMonth = start.month() === this.month;
            cloned.isSaturday = start.day() === 6;
            cloned.isSunday = start.day() === 0;
            cloned.isSelectable = this.selectable(start);
            var yyyymmdd = start.format("YYYYMMDD");
            cloned.isToday = yyyymmdd === today;
            week.push(cloned);
            if (cloned.isSaturday) {
                this.weeks.push(week);
                week = [];
                if (this.weeks.length == 6) {
                    break;
                }
            }
        } while (start.add(1, 'day'));
        this.recalcIsSelected();
    };
    DateComponent.prototype.onError = function (err) {
        console.error(err);
    };
    //- 功能函數
    DateComponent.prototype.recalcIsSelected = function () {
        if (!this._date)
            return;
        var selected = this._date.map(function (date) { return date.format("YYYYMMDD"); });
        this.weeks.map(function (week) {
            return week.map(function (day) {
                var yyyymmdd = day.format("YYYYMMDD");
                day.isSelected = selected.indexOf(yyyymmdd) !== -1;
            });
        });
    };
    DateComponent.prototype.initYearAndMonthFromData = function () {
        var _this = this;
        this._date = this._data.map(function (data) { return moment(data, _this.format); });
        if (this._date.length) {
            var date = this._date[this._date.length - 1];
            this.year = date.year();
            this.month = date.month();
        }
    };
    DateComponent.prototype.selectDay = function (day) {
        var _this = this;
        if (this.multi) {
            if (this.isContinue) {
                if (this._date.length === 1) {
                    if (this._date[0].isAfter(day)) {
                        var tmp = this._date[0];
                        this._date[0] = day.clone();
                        day = tmp;
                    }
                    else {
                        this._date.push(day.clone());
                    }
                    for (var i = this._date[0].clone(); i.isSameOrBefore(day); i.add(1, 'day')) {
                        this._date.push(i.clone());
                    }
                    this._date.push(day);
                }
                else {
                    this._date = [day.clone()];
                }
            }
            else {
                var YYYYMMDD_1 = day.format("YYYYMMDD");
                var idx = this._date.findIndex(function (date) { return date.format("YYYYMMDD") === YYYYMMDD_1; });
                if (idx === -1) {
                    this._date.push(day.clone());
                }
                else {
                    this._date.splice(idx, 1);
                }
            }
        }
        else {
            this._date[0] = day.clone();
        }
        this._date = this._date.filter(function (date) { return _this.selectable(date); }).slice(0, this.multi);
        this.dateChange.emit(this._date);
    };
    DateComponent.prototype.nextMonth = function () {
        this.month++;
        if (this.month >= 12) {
            this.month = 0;
            this.year++;
        }
    };
    DateComponent.prototype.prevMonth = function () {
        this.month--;
        if (this.month < 0) {
            this.month = 11;
            this.year--;
        }
    };
    DateComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ay-date',
                    template: "\n    <ng-template #defaultHeaderTemplate=\"\" let-datepicker=\"datepicker\"><div class=\"header\"><button (click)=\"datepicker.prevMonth()\" tabindex=\"1\"><div class=\"fa fa-angle-left\"></div></button><ng-template [ngTemplateOutlet]=\"yearTemplate\" [ngOutletContext]=\"{ datepicker: datepicker }\"></ng-template><ng-template [ngTemplateOutlet]=\"monthTemplate\" [ngOutletContext]=\"{ datepicker: datepicker }\"></ng-template><button (click)=\"datepicker.nextMonth()\" tabindex=\"1\"><div class=\"fa fa-angle-right\"></div></button></div></ng-template><ng-template #defaultYearTemplate=\"\" let-datepicker=\"datepicker\"><ay-dropdown class=\"year\" [(data)]=\"datepicker.year\" [items]=\"datepicker.years\" icon=\"\"><ng-template #displayTemplate=\"\" let-display=\"display\" let-dropdown=\"dropdown\"><ng-template [ngTemplateOutlet]=\"yearDropdownDisplayTemplate\" [ngOutletContext]=\"{ dropdown: dropdown, datepicker: datepicker, display: display }\"></ng-template></ng-template><ng-template #itemTemplate=\"\" let-disable=\"disable\" let-dropdown=\"dropdown\" let-index=\"index\" let-item=\"item\"><ng-template [ngTemplateOutlet]=\"yearDropdownItemTemplate\" [ngOutletContext]=\"{ dropdown: dropdown, datepicker: datepicker, disable: disable, item: item, index: index }\"></ng-template></ng-template></ay-dropdown></ng-template><ng-template #defaultYearDropdownDisplayTemplate=\"\" let-datepicker=\"datepicker\" let-display=\"display\" let-dropdown=\"dropdown\"><div class=\"display\" [ngClass]=\"{ isOpen: dropdown.isOpen, isFocus: dropdown.isFocus }\"><div class=\"label\">{{ display }}</div></div></ng-template><ng-template #defaultYearDropdownItemTemplate=\"\" let-datepicker=\"datepicker\" let-disable=\"disable\" let-dropdown=\"dropdown\" let-index=\"index\" let-item=\"item\"><div class=\"item\" [ngClass]=\"{ hover: dropdown.hoverIndex == index, disable: disable}\">{{ item }}</div></ng-template><ng-template #defaultMonthTemplate=\"\" let-datepicker=\"datepicker\"><ay-dropdown class=\"month\" [(data)]=\"datepicker.month\" [items]=\"datepicker.months\" icon=\"\"><ng-template #displayTemplate=\"\" let-display=\"display\" let-dropdown=\"dropdown\"><ng-template [ngTemplateOutlet]=\"monthDropdownDisplayTemplate\" [ngOutletContext]=\"{ display: display, dropdown: dropdown, datepicker: datepicker }\"></ng-template></ng-template><ng-template #itemTemplate=\"\" let-disable=\"disable\" let-dropdown=\"dropdown\" let-index=\"index\" let-item=\"item\"><ng-template [ngTemplateOutlet]=\"monthDropdownItemTemplate\" [ngOutletContext]=\"{ dropdown: dropdown, datepicker: datepicker, disable: disable, item: item, index: index }\"></ng-template></ng-template></ay-dropdown></ng-template><ng-template #defaultMonthDropdownDisplayTemplate=\"\" let-datepicker=\"datepicker\" let-display=\"display\" let-dropdown=\"dropdown\"><div class=\"display\" [ngClass]=\"{ isOpen: dropdown.isOpen, isFocus: dropdown.isFocus }\"><div class=\"label\">{{ datepicker.momthString[display] }}</div></div></ng-template><ng-template #defaultMonthDropdownItemTemplate=\"\" let-datepicker=\"datepicker\" let-disable=\"disable\" let-dropdown=\"dropdown\" let-index=\"index\" let-item=\"item\"><div class=\"item\" [ngClass]=\"{ hover: dropdown.hoverIndex == index, disable: disable}\">{{ datepicker.momthString[item] }}</div></ng-template><ng-template #defaultWeeksTemplate=\"\" let-datepicker=\"datepicker\"><div class=\"weeks\"><div class=\"week weekdays\"><ng-template [ngForOf]=\"datepicker.weekdayString\" let-i=\"index\" let-weekday=\"\" ngFor=\"\"><ng-template [ngTemplateOutlet]=\"weekdayTemplate\" [ngOutletContext]=\"{ datepicker: datepicker, weekday: weekday }\"></ng-template></ng-template></div><div class=\"week\" *ngFor=\"let week of weeks\"><ng-template [ngForOf]=\"week\" let-day=\"\" ngFor=\"\"><ng-template [ngTemplateOutlet]=\"dayTemplate\" [ngOutletContext]=\"{ day: day, datepicker: datepicker }\"></ng-template></ng-template></div></div></ng-template><ng-template #defaultWeekdayTemplate=\"\" let-datepicker=\"datepicker\" let-weekday=\"weekday\"><div class=\"weekday\"><p>{{ weekday }}</p></div></ng-template><ng-template #defaultDayTemplate=\"\" let-datepicker=\"datepicker\" let-day=\"day\"><div class=\"day\" [ngClass]=\"{ isSameMonth: day.isSameMonth, isSaturday: day.isSaturday, isSunday: day.isSunday, isToday: day.isToday, isSelected: day.isSelected, isSelectable: day.isSelectable }\" (click)=\"datepicker.selectDay(day)\"><div class=\"circle\">{{ day.date() }}</div></div></ng-template><ng-template [ngTemplateOutlet]=\"headerTemplate\" [ngOutletContext]=\"{ datepicker: datepicker }\"></ng-template><ng-template [ngTemplateOutlet]=\"weeksTemplate\" [ngOutletContext]=\"{ datepicker: datepicker }\"></ng-template>\n  ",
                    styles: ["\n    ay-date {\n      display: inline-block;\n      font-size: .8em;\n      vertical-align: top;\n      box-shadow: 0 1px 7px rgba(0, 0, 0, 0.05), 0 7px 17px rgba(0, 0, 0, 0.1); }\n      ay-date .header {\n        display: flex;\n        height: 3em; }\n        ay-date .header ay-dropdown {\n          background-color: transparent;\n          flex: 1;\n          margin: 0; }\n          ay-date .header ay-dropdown .display {\n            height: 3em; }\n            ay-date .header ay-dropdown .display .label {\n              line-height: 2.5em;\n              text-align: center; }\n          ay-date .header ay-dropdown .item {\n            line-height: 2.5em;\n            text-align: center; }\n        ay-date .header button {\n          padding: 0;\n          border: none;\n          background-color: #F2F2F2; }\n          ay-date .header button:hover, ay-date .header button:focus {\n            outline: none !important;\n            background: #E2E2E2;\n            position: relative;\n            box-shadow: 0 1px 7px rgba(0, 0, 0, 0.05), 0 7px 17px rgba(0, 0, 0, 0.1); }\n          ay-date .header button .fa {\n            display: inline-block;\n            width: 3em;\n            box-sizing: border-box;\n            height: 3em;\n            line-height: 2.5em;\n            font-size: 1em;\n            padding: .25em .5em;\n            text-align: center;\n            cursor: pointer; }\n      ay-date .weeks {\n        background: #FFF; }\n        ay-date .weeks .weekdays .weekday {\n          width: 3em;\n          height: 3em;\n          display: inline-block;\n          padding: .25em;\n          box-sizing: border-box;\n          cursor: pointer;\n          color: #999;\n          text-align: center;\n          color: #AAA;\n          line-height: 2.5em;\n          cursor: initial; }\n          ay-date .weeks .weekdays .weekday.isSameMonth {\n            color: #000; }\n          ay-date .weeks .weekdays .weekday.isSaturday, ay-date .weeks .weekdays .weekday.isSunday {\n            background: #F2F2F2; }\n          ay-date .weeks .weekdays .weekday.isToday {\n            color: #333; }\n          ay-date .weeks .weekdays .weekday:hover.isSelectable .circle, ay-date .weeks .weekdays .weekday.isSelected.isSelectable .circle {\n            outline: none !important;\n            background: #E2E2E2;\n            position: relative;\n            box-shadow: 0 1px 7px rgba(0, 0, 0, 0.05), 0 7px 17px rgba(0, 0, 0, 0.1);\n            background-color: #308BC8;\n            color: #FFF; }\n          ay-date .weeks .weekdays .weekday:not(.isSelectable) {\n            color: #999;\n            cursor: initial; }\n          ay-date .weeks .weekdays .weekday .circle {\n            display: inline-block;\n            text-align: center;\n            width: 2.5em;\n            height: 2.5em;\n            line-height: 2.5em;\n            box-sizing: border-box;\n            user-select: none;\n            border-radius: 100%; }\n          ay-date .weeks .weekdays .weekday p {\n            font-size: .8em;\n            margin: 0; }\n          ay-date .weeks .weekdays .weekday:first-child, ay-date .weeks .weekdays .weekday:last-child {\n            background-color: #F2F2F2; }\n        ay-date .weeks .week .day {\n          background-color: #FFF;\n          width: 3em;\n          height: 3em;\n          display: inline-block;\n          padding: .25em;\n          box-sizing: border-box;\n          cursor: pointer;\n          color: #999; }\n          ay-date .weeks .week .day.isSameMonth {\n            color: #000; }\n          ay-date .weeks .week .day.isSaturday, ay-date .weeks .week .day.isSunday {\n            background: #F2F2F2; }\n          ay-date .weeks .week .day.isToday {\n            color: #333; }\n          ay-date .weeks .week .day:hover.isSelectable .circle, ay-date .weeks .week .day.isSelected.isSelectable .circle {\n            outline: none !important;\n            background: #E2E2E2;\n            position: relative;\n            box-shadow: 0 1px 7px rgba(0, 0, 0, 0.05), 0 7px 17px rgba(0, 0, 0, 0.1);\n            background-color: #308BC8;\n            color: #FFF; }\n          ay-date .weeks .week .day:not(.isSelectable) {\n            color: #999;\n            cursor: initial; }\n          ay-date .weeks .week .day .circle {\n            display: inline-block;\n            text-align: center;\n            width: 2.5em;\n            height: 2.5em;\n            line-height: 2.5em;\n            box-sizing: border-box;\n            user-select: none;\n            border-radius: 100%; }\n  "],
                    encapsulation: ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    DateComponent.ctorParameters = function () { return []; };
    DateComponent.propDecorators = {
        'minYear': [{ type: Input },],
        'maxYear': [{ type: Input },],
        'format': [{ type: Input },],
        'weeksChange': [{ type: Output },],
        'yearChange': [{ type: Output },],
        'monthChange': [{ type: Output },],
        'dateChange': [{ type: Output },],
        'dataChange': [{ type: Output },],
        'data': [{ type: Input },],
        'selectableChange': [{ type: Output },],
        'selectable': [{ type: Input },],
        'multi': [{ type: Input },],
        'isContinue': [{ type: Input, args: ["continue",] },],
        'defaultHeaderTemplate': [{ type: ViewChild, args: ["defaultHeaderTemplate",] },],
        'headerTemplate': [{ type: ContentChild, args: ["headerTemplate",] },],
        'defaultYearTemplate': [{ type: ViewChild, args: ["defaultYearTemplate",] },],
        'yearTemplate': [{ type: ContentChild, args: ["yearTemplate",] },],
        'defaultYearDropdownDisplayTemplate': [{ type: ViewChild, args: ["defaultYearDropdownDisplayTemplate",] },],
        'yearDropdownDisplayTemplate': [{ type: ContentChild, args: ["yearDropdownDisplayTemplate",] },],
        'defaultYearDropdownItemTemplate': [{ type: ViewChild, args: ["defaultYearDropdownItemTemplate",] },],
        'yearDropdownItemTemplate': [{ type: ContentChild, args: ["yearDropdownItemTemplate",] },],
        'defaultMonthTemplate': [{ type: ViewChild, args: ["defaultMonthTemplate",] },],
        'monthTemplate': [{ type: ContentChild, args: ["monthTemplate",] },],
        'defaultMonthDropdownDisplayTemplate': [{ type: ViewChild, args: ["defaultMonthDropdownDisplayTemplate",] },],
        'monthDropdownDisplayTemplate': [{ type: ContentChild, args: ["monthDropdownDisplayTemplate",] },],
        'defaultMonthDropdownItemTemplate': [{ type: ViewChild, args: ["defaultMonthDropdownItemTemplate",] },],
        'monthDropdownItemTemplate': [{ type: ContentChild, args: ["monthDropdownItemTemplate",] },],
        'defaultDayTemplate': [{ type: ViewChild, args: ["defaultDayTemplate",] },],
        'dayTemplate': [{ type: ContentChild, args: ["dayTemplate",] },],
        'defaultWeeksTemplate': [{ type: ViewChild, args: ["defaultWeeksTemplate",] },],
        'weeksTemplate': [{ type: ContentChild, args: ["weeksTemplate",] },],
        'defaultWeekdayTemplate': [{ type: ViewChild, args: ["defaultWeekdayTemplate",] },],
        'weekdayTemplate': [{ type: ContentChild, args: ["weekdayTemplate",] },],
    };
    __decorate([
        bind
    ], DateComponent.prototype, "afterDateChange", null);
    __decorate([
        bind
    ], DateComponent.prototype, "afterYMChange", null);
    __decorate([
        bind
    ], DateComponent.prototype, "recalcIsSelected", null);
    __decorate([
        bind
    ], DateComponent.prototype, "initYearAndMonthFromData", null);
    __decorate([
        bind
    ], DateComponent.prototype, "selectDay", null);
    __decorate([
        bind
    ], DateComponent.prototype, "nextMonth", null);
    __decorate([
        bind
    ], DateComponent.prototype, "prevMonth", null);
    return DateComponent;
}());
export { DateComponent };
//# sourceMappingURL=date.component.js.map