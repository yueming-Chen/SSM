var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Component, HostListener, ViewChild, ElementRef, ContentChild, Input, EventEmitter, Output, Renderer, NgZone, ViewEncapsulation, ContentChildren } from "@angular/core";
import { bind, range, defaults, falsy } from "@ay/util";
import { AnchorComponent } from "./anchor.component";
var ScrollComponent = (function () {
    //- 事件
    function ScrollComponent(_renderer, _ngZone, _elementRef) {
        this._renderer = _renderer;
        this._ngZone = _ngZone;
        this._elementRef = _elementRef;
        //- 私有變數
        this._lastThumbXPosition = 0;
        this._lastThumbYPosition = 0;
        this._draggingX = false;
        this._draggingY = false;
        this._lastPageX = 0;
        this._lastPageY = 0;
        this._lastTouchXPosition = 0;
        this._lastTouchYPosition = 0;
        //- 公有變數
        this.falsy = falsy;
        this.range = range;
        this.thumbXSize = 0;
        this.thumbYSize = 0;
        this.displayX = false;
        this.displayY = false;
        this.maxThumbXPosition = Infinity;
        this.maxThumbYPosition = Infinity;
        this.maxScrollXPosition = Infinity;
        this.maxScrollYPosition = Infinity;
        //- 參數
        this.scrollX = true;
        this.scrollY = true;
        this.showX = true;
        this.showY = true;
        /** show */
        this._show = true;
        this.activeChange = new EventEmitter();
        /** scrollLeft */
        this._scrollLeft = 0;
        this.scrollLeftChange = new EventEmitter();
        /** thumbXPosition */
        this._thumbXPosition = 0;
        /** scrollTop */
        this._scrollTop = 0;
        this.scrollTopChange = new EventEmitter();
        /** thumbYPosition */
        this._thumbYPosition = 0;
        /** height */
        this._height = 200;
        this.heightChange = new EventEmitter();
        /** width */
        this._width = "100%";
        this.widthChange = new EventEmitter();
        //- 樣板
        this.defaultContentTemplate = null;
        this.contentTemplate = null;
        this.AnchorQueryList = null;
        this.nativeElement = this._elementRef.nativeElement;
    }
    Object.defineProperty(ScrollComponent.prototype, "active", {
        get: function () {
            return this._active;
        },
        set: function (active) {
            if (this._active === active)
                return;
            this._active = active;
            this.navigateTo(active);
            this.activeChange.emit(this._active);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollComponent.prototype, "show", {
        get: function () {
            return this._show;
        },
        set: function (show) {
            if (this._show === show)
                return;
            this._show = show;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollComponent.prototype, "scrollLeft", {
        get: function () {
            return this._scrollLeft;
        },
        set: function (scrollLeft) {
            if (this._scrollLeft === scrollLeft)
                return;
            this._scrollLeft = scrollLeft;
            this.contentElement.nativeElement.style.left = -scrollLeft + "px";
            this.scrollLeftChange.emit(this._scrollLeft);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollComponent.prototype, "thumbXPosition", {
        // @Output()
        // public thumbXPositionChange: EventEmitter<number> = new EventEmitter<number>();
        get: function () {
            return this._thumbXPosition;
        },
        set: function (thumbXPosition) {
            if (this._thumbXPosition === thumbXPosition)
                return;
            this._thumbXPosition = thumbXPosition;
            this.thumbXElement.nativeElement.style.left = thumbXPosition + "px";
            // this.thumbXPositionChange.emit(this._thumbXPosition);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollComponent.prototype, "scrollTop", {
        // @Input()
        get: function () {
            return this._scrollTop;
        },
        set: function (scrollTop) {
            if (this._scrollTop === scrollTop)
                return;
            this._scrollTop = scrollTop;
            this.contentElement.nativeElement.style.top = -scrollTop + "px";
            try {
                var active = this.AnchorQueryList
                    .filter(function (anchor) { return anchor.element.nativeElement.offsetTop <= scrollTop; })
                    .pop()
                    .name;
                if (active != this._active) {
                    this._active = active;
                    this.activeChange.emit(this._active);
                }
            }
            catch (e) { }
            this.scrollTopChange.emit(this._scrollTop);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollComponent.prototype, "thumbYPosition", {
        // @Output()
        // public thumbYPositionChange: EventEmitter<number> = new EventEmitter<number>();
        // @Input()
        get: function () {
            return this._thumbYPosition;
        },
        set: function (thumbYPosition) {
            if (this._thumbYPosition === thumbYPosition)
                return;
            this._thumbYPosition = thumbYPosition;
            this.thumbYElement.nativeElement.style.top = thumbYPosition + "px";
            // this.thumbYPositionChange.emit(this._thumbYPosition);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollComponent.prototype, "height", {
        get: function () {
            return this._height;
        },
        set: function (height) {
            if (this._height === height)
                return;
            this._height = height;
            this.heightChange.emit(this._height);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollComponent.prototype, "width", {
        get: function () {
            return this._width;
        },
        set: function (width) {
            if (this._width === width)
                return;
            this._width = width;
            this.widthChange.emit(this._width);
        },
        enumerable: true,
        configurable: true
    });
    ScrollComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.contentTemplate = defaults(this.contentTemplate, this.defaultContentTemplate);
        this.heightChange.subscribe(this.resize, this.showError);
        this._scrollTopChangeThrottle$ = this.scrollTopChange
            .merge(this.scrollLeftChange)
            .throttleTime(500)
            .subscribe(function () {
            _this.trackXElement.nativeElement.className += " show";
            _this.trackYElement.nativeElement.className += " show";
            _this._ngZone.runOutsideAngular(function () { });
        }, this.showError);
        this._scrollTopChangeDebounce$ = this.scrollTopChange
            .merge(this.scrollLeftChange)
            .debounceTime(500)
            .subscribe(function () {
            _this.trackXElement.nativeElement.className = _this.trackXElement.nativeElement.className.replace(/[^\w]*show[^\w]*/ig, " ");
            _this.trackYElement.nativeElement.className = _this.trackYElement.nativeElement.className.replace(/[^\w]*show[^\w]*/ig, " ");
            _this._ngZone.run(function () { });
        }, this.showError);
        this._AnchorQueryList$ = this.AnchorQueryList.changes.subscribe(function () {
            _this.AnchorQueryList.map(function (anchor) { return anchor.offset = {
                x: anchor.element.nativeElement.offsetLeft,
                y: anchor.element.nativeElement.offsetTop
            }; });
        });
        this.AnchorQueryList.notifyOnChanges();
    };
    ScrollComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.makeThumbDraggable();
        this.makeTrackClickable();
        this.resize();
        this._ngZone.runOutsideAngular(function () {
            _this.contentElement.nativeElement.addEventListener("mousewheel", _this.onWheel);
        });
    };
    ScrollComponent.prototype.ngOnDestroy = function () {
        if (this.mutationObserver) {
            this.mutationObserver.disconnect();
            this.mutationObserver = null;
        }
        this.thumbXElement.nativeElement.removeEventListener('mousedown', this.startDrogThumbX);
        this.thumbYElement.nativeElement.removeEventListener('mousedown', this.startDrogThumbY);
        this._scrollTopChangeDebounce$.unsubscribe();
        this._scrollTopChangeThrottle$.unsubscribe();
    };
    Object.defineProperty(ScrollComponent.prototype, "wrapperHeight", {
        get: function () {
            if (this._wrapperHeight === null) {
                this._wrapperHeight = this.wrapperElement.nativeElement.offsetHeight;
            }
            return this._wrapperHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollComponent.prototype, "wrapperWidth", {
        get: function () {
            return this.wrapperElement.nativeElement.offsetWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollComponent.prototype, "contentHeight", {
        get: function () {
            return this.contentElement.nativeElement.offsetHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollComponent.prototype, "contentWidth", {
        get: function () {
            return this.contentElement.nativeElement.offsetWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollComponent.prototype, "thumbYHeight", {
        get: function () {
            return this.thumbYElement.nativeElement.offsetHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollComponent.prototype, "thumbXWidth", {
        get: function () {
            return this.thumbXElement.nativeElement.offsetWidth;
        },
        enumerable: true,
        configurable: true
    });
    ScrollComponent.prototype.recalcScrollTop = function () {
        this.scrollTop = range(0, -this.thumbYPosition / (this.thumbYHeight - this.wrapperHeight) * this.maxScrollYPosition, this.maxScrollYPosition);
    };
    ScrollComponent.prototype.recalcScrollLeft = function () {
        this.scrollLeft = range(0, -this.thumbXPosition / (this.thumbXWidth - this.wrapperWidth) * this.maxScrollXPosition, this.maxScrollXPosition);
    };
    ScrollComponent.prototype.recalcThumbXPosition = function () {
        this.thumbXPosition = range(0, -this.scrollLeft / (this.contentWidth - this.wrapperWidth) * (this.thumbXWidth - this.wrapperWidth), this.maxThumbXPosition);
    };
    ScrollComponent.prototype.recalcThumbYPosition = function () {
        this.thumbYPosition = range(0, -this.scrollTop / (this.contentHeight - this.wrapperHeight) * (this.thumbYHeight - this.wrapperHeight), this.maxThumbYPosition);
    };
    ScrollComponent.prototype.showError = function (err) {
        console.error(err);
    };
    ScrollComponent.prototype.resize = function () {
        var _this = this;
        setTimeout(function () {
            _this._wrapperHeight = null;
            _this.recalcThumbSize();
            _this.checkScrollIsDisplay();
            _this.recalcMaxThumbPosition();
            _this.recalcMaxScrollPosition();
            var left = _this.scrollLeft;
            _this.scrollLeft = 0;
            _this.scrollLeft = left;
            var top = _this.scrollTop;
            _this.scrollTop = 0;
            _this.scrollTop = top;
        }, 1);
    };
    ScrollComponent.prototype.recalcThumbSize = function () {
        this.thumbXSize = this.wrapperWidth / this.contentWidth * this.wrapperWidth;
        this.thumbYSize = this.wrapperHeight / this.contentHeight * this.wrapperHeight;
    };
    ScrollComponent.prototype.checkScrollIsDisplay = function () {
        var wapper = this.wrapperElement.nativeElement;
        this.displayX = falsy(this.scrollX) && this.thumbXSize !== this.wrapperWidth;
        this.displayY = falsy(this.scrollY) && this.thumbYSize !== this.wrapperHeight;
    };
    ScrollComponent.prototype.recalcMaxThumbPosition = function () {
        if (this.thumbXElement) {
            this.maxThumbXPosition = this.wrapperWidth - this.thumbXWidth;
        }
        if (this.thumbYElement) {
            this.maxThumbYPosition = this.wrapperHeight - this.thumbYHeight;
        }
    };
    ScrollComponent.prototype.recalcMaxScrollPosition = function () {
        var warpper = this.wrapperElement.nativeElement;
        var content = this.contentElement.nativeElement;
        this.maxScrollXPosition = content.offsetWidth - warpper.offsetWidth;
        this.maxScrollYPosition = content.offsetHeight - warpper.offsetHeight;
    };
    // 觸碰螢幕拖曳
    ScrollComponent.prototype.onTouchStart = function (e) {
        e.target.addEventListener('touchmove', this.onTouchMove, false);
        e.target.addEventListener('touchend', this.onTouchEnd, false);
        this._lastTouchXPosition = e.changedTouches[0].clientX;
        this._lastTouchYPosition = e.changedTouches[0].clientY;
    };
    ScrollComponent.prototype.onTouchMove = function (e) {
        var deltaX = (this._lastTouchXPosition - e.changedTouches[0].clientX);
        var deltaY = (this._lastTouchYPosition - e.changedTouches[0].clientY);
        this._lastTouchXPosition = e.changedTouches[0].clientX;
        this._lastTouchYPosition = e.changedTouches[0].clientY;
        this.scrollContent(this.scrollLeft + deltaX, this.scrollTop + deltaY);
        this.preventDefaultEvent(e);
    };
    ScrollComponent.prototype.onTouchEnd = function (e) {
        e.target.removeEventListener('touchmove');
        e.target.removeEventListener('touchend');
    };
    // 直接點擊軌道
    ScrollComponent.prototype.makeTrackClickable = function () {
        var _this = this;
        this._ngZone.runOutsideAngular(function () {
            _this.trackXElement.nativeElement.addEventListener('mousedown', _this.clickTrackX, false);
            _this.trackYElement.nativeElement.addEventListener('mousedown', _this.clickTrackY, false);
        });
    };
    ScrollComponent.prototype.clickTrackX = function (e) {
        this.scrollThumb(e.offsetX - this.thumbXSize / 2, this.thumbYPosition);
    };
    ScrollComponent.prototype.clickTrackY = function (e) {
        this.scrollThumb(this.thumbXPosition, e.offsetY - this.thumbYSize / 2);
    };
    // 拖拉 thumb
    ScrollComponent.prototype.makeThumbDraggable = function () {
        var _this = this;
        this._ngZone.runOutsideAngular(function () {
            _this.thumbXElement.nativeElement.addEventListener('mousedown', _this.startDrogThumbX, false);
            _this.thumbYElement.nativeElement.addEventListener('mousedown', _this.startDrogThumbY, false);
        });
    };
    ;
    ScrollComponent.prototype.startDrogThumbX = function (e) {
        var _this = this;
        if (!this._draggingX) {
            this._lastPageX = e.pageX;
            this._lastThumbXPosition = this.thumbXPosition;
            this._draggingX = true;
            this._ngZone.runOutsideAngular(function () {
                window.addEventListener('mousemove', _this.thumbDraggingX, false);
                window.addEventListener('selectstart', _this.preventDefaultEvent, false);
            });
        }
        this.preventDefaultEvent(e);
    };
    ScrollComponent.prototype.startDrogThumbY = function (e) {
        var _this = this;
        if (!this._draggingY) {
            this._lastPageY = e.pageY;
            this._lastThumbYPosition = this.thumbYPosition;
            this._draggingY = true;
            this._ngZone.runOutsideAngular(function () {
                window.addEventListener('mousemove', _this.thumbDraggingY, false);
                window.addEventListener('selectstart', _this.preventDefaultEvent, false);
            });
        }
        this.preventDefaultEvent(e);
    };
    ScrollComponent.prototype.thumbDraggingX = function (e) {
        this.scrollThumb(this._lastThumbXPosition + e.pageX - this._lastPageX, this.thumbYPosition);
    };
    ScrollComponent.prototype.thumbDraggingY = function (e) {
        this.scrollThumb(this.thumbXPosition, this._lastThumbYPosition + e.pageY - this._lastPageY);
    };
    ScrollComponent.prototype.preventDefaultEvent = function (e) {
        e.preventDefault();
        e.stopPropagation();
    };
    ;
    ScrollComponent.prototype.endDragThumb = function (e) {
        window.removeEventListener('mousemove', this.thumbDraggingX, false);
        window.removeEventListener('mousemove', this.thumbDraggingY, false);
        window.removeEventListener('selectstart', this.preventDefaultEvent, false);
        this._draggingX = false;
        this._draggingY = false;
    };
    // 滾輪
    ScrollComponent.prototype.onWheel = function (e) {
        var deltaY = 0;
        var deltaX = 0;
        if (e.deltaX !== undefined) {
            deltaX = e.deltaX;
        }
        else if (e.wheelDeltaX !== undefined) {
            deltaX = -e.wheelDeltaX;
        }
        else if (e.detail !== undefined && e.axis & 1) {
            deltaX = e.detail * 8;
        }
        if (e.deltaY !== undefined) {
            deltaY = e.deltaY;
        }
        else if (e.wheelDeltaY !== undefined) {
            deltaY = -e.wheelDeltaY;
        }
        else if (e.detail !== undefined && e.axis & 2) {
            deltaY = e.detail * 8;
        }
        if (deltaY && (!this.displayY || (deltaY > 0 && this.thumbYPosition == this.maxThumbYPosition) || (deltaY < 0 && this.thumbYPosition == 0)) && this.displayX) {
            deltaX = deltaY;
            deltaY = 0;
        }
        var lastScrollLeft = this.scrollLeft;
        var lastScrollTop = this.scrollTop;
        this.scrollContent(this.scrollLeft + deltaX, this.scrollTop + deltaY);
        if (lastScrollLeft !== this.scrollLeft || lastScrollTop !== this.scrollTop) {
            e.stopPropagation();
            e.preventDefault();
            return false;
        }
    };
    ScrollComponent.prototype.scrollContent = function (x, y) {
        if (this.displayX) {
            this.scrollLeft = range(0, x, this.maxScrollXPosition);
            this.recalcThumbXPosition();
        }
        if (this.displayY) {
            this.scrollTop = range(0, y, this.maxScrollYPosition);
            this.recalcThumbYPosition();
        }
    };
    ScrollComponent.prototype.scrollThumb = function (x, y) {
        var warpper = this.wrapperElement.nativeElement;
        var content = this.contentElement.nativeElement;
        if (this.displayX) {
            var thumbX = this.thumbXElement.nativeElement;
            this.thumbXPosition = range(0, x, this.maxThumbXPosition);
            this.recalcScrollLeft();
        }
        if (this.displayY) {
            var thumbY = this.thumbYElement.nativeElement;
            this.thumbYPosition = range(0, y, this.maxThumbYPosition);
            this.recalcScrollTop();
        }
    };
    ScrollComponent.prototype.navigateTo = function (anchorName) {
        var anchor = this.AnchorQueryList.find(function (anchor) { return anchor.name === anchorName; });
        if (anchor === undefined) {
            throw "找不到錨點" + anchorName;
        }
        var offsetTop = anchor.element.nativeElement.offsetTop;
        var offsetLeft = anchor.element.nativeElement.offsetLeft;
        this.active = anchorName;
        this.smoothScrollContent(offsetLeft, offsetTop);
    };
    ScrollComponent.prototype.smoothScrollContent = function (x, y, duration, fn) {
        var _this = this;
        if (duration === void 0) { duration = 500; }
        if (fn === void 0) { fn = this.easeInOutCubic; }
        var clock = Date.now();
        var requestAnimationFrame = window.requestAnimationFrame || (function (fn) { return window.setTimeout(fn, 15); });
        var offset = 0;
        var start = { x: this.scrollLeft, y: this.scrollTop };
        var end = { x: x, y: y };
        var step = function () {
            var elapsed = Date.now() - clock;
            var position = _this.caleSmoothPosition(start, end, elapsed, duration);
            _this.scrollContent(position.x, position.y);
            if (elapsed > duration) {
            }
            else {
                requestAnimationFrame(step);
            }
        };
        step();
    };
    ScrollComponent.prototype.caleSmoothPosition = function (start, end, elapsed, duration) {
        if (elapsed > duration) {
            return end;
        }
        ;
        var t = this.easeInOutCubic(elapsed / duration);
        return {
            x: start.x + (end.x - start.x) * t,
            y: start.y + (end.y - start.y) * t
        };
    };
    ScrollComponent.prototype.easeInOutCubic = function (t) {
        return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
    };
    ScrollComponent.decorators = [
        { type: Component, args: [{
                    template: "\n    <div class=\"outter\"><div class=\"wrapper\" #wrapperElement=\"\"><div class=\"content\" #contentElement=\"\"><ng-content></ng-content></div><div class=\"track y\" #trackYElement=\"\" [ngStyle]=\"{ 'display': displayY &amp;&amp; falsy(showX) ? 'block' : 'none' }\"><div class=\"thumb\" #thumbYElement=\"\" [style.height.px]=\"thumbYSize\"></div></div><div class=\"track x\" #trackXElement=\"\" [ngStyle]=\"{ 'display': displayX &amp;&amp; falsy(showY) ? 'block' : 'none' }\"><div class=\"thumb\" #thumbXElement=\"\" [style.width.px]=\"thumbXSize\"></div></div></div></div>\n  ",
                    selector: 'ay-scroll',
                    styles: ["\n    ay-scroll {\n      position: relative;\n      display: block; }\n      ay-scroll > .outter {\n        position: relative;\n        padding: 0 10px 10px 0;\n        width: 100%;\n        height: 100%; }\n        ay-scroll > .outter > .wrapper {\n          position: relative;\n          overflow: hidden;\n          box-sizing: border-box;\n          width: 100%;\n          height: 100%; }\n          ay-scroll > .outter > .wrapper > .content {\n            min-height: 100%;\n            min-width: 100%;\n            position: absolute;\n            display: block; }\n      ay-scroll .track {\n        position: absolute;\n        display: block;\n        cursor: pointer;\n        margin: 0;\n        box-sizing: border-box;\n        transition: all .3s linear; }\n        ay-scroll .track:hover, ay-scroll .track.show {\n          background-color: #E2E2E2; }\n          ay-scroll .track:hover .thumb, ay-scroll .track.show .thumb {\n            background-color: #333; }\n      ay-scroll .thumb {\n        border-radius: 5px;\n        position: absolute;\n        opacity: 1;\n        display: block;\n        cursor: pointer;\n        z-index: 200;\n        margin: 0; }\n      ay-scroll .track.y {\n        width: 6px;\n        height: 100%;\n        top: 0;\n        right: 0; }\n        ay-scroll .track.y .thumb {\n          top: 0;\n          right: 0;\n          width: 6px;\n          min-height: 30px; }\n      ay-scroll .track.x {\n        width: 100%;\n        height: 6px;\n        bottom: 0;\n        left: 0; }\n        ay-scroll .track.x .thumb {\n          top: 0;\n          left: 0;\n          height: 6px;\n          min-width: 30px; }\n  "],
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[style.height.px]': 'height',
                        '[style.width.px]': 'width'
                    }
                },] },
    ];
    /** @nocollapse */
    ScrollComponent.ctorParameters = function () { return [
        { type: Renderer, },
        { type: NgZone, },
        { type: ElementRef, },
    ]; };
    ScrollComponent.propDecorators = {
        'scrollX': [{ type: Input },],
        'scrollY': [{ type: Input },],
        'showX': [{ type: Input },],
        'showY': [{ type: Input },],
        'activeChange': [{ type: Output },],
        'active': [{ type: Input },],
        'show': [{ type: Input },],
        'scrollLeftChange': [{ type: Output },],
        'scrollLeft': [{ type: Input },],
        'thumbXPosition': [{ type: Input },],
        'scrollTopChange': [{ type: Output },],
        'height': [{ type: Input },],
        'widthChange': [{ type: Output },],
        'width': [{ type: Input },],
        'defaultContentTemplate': [{ type: ViewChild, args: ["defaultContentTemplate",] },],
        'contentTemplate': [{ type: ContentChild, args: ["contentTemplate",] },],
        'contentElement': [{ type: ViewChild, args: ["contentElement",] },],
        'thumbXElement': [{ type: ViewChild, args: ["thumbXElement",] },],
        'thumbYElement': [{ type: ViewChild, args: ["thumbYElement",] },],
        'trackXElement': [{ type: ViewChild, args: ["trackXElement",] },],
        'trackYElement': [{ type: ViewChild, args: ["trackYElement",] },],
        'wrapperElement': [{ type: ViewChild, args: ["wrapperElement",] },],
        'AnchorQueryList': [{ type: ContentChildren, args: [AnchorComponent,] },],
        'resize': [{ type: HostListener, args: ['window:resize', ['$event'],] },],
        'onTouchStart': [{ type: HostListener, args: ["touchstart", ['$event'],] },],
        'endDragThumb': [{ type: HostListener, args: ["window:mouseup", ['$event'],] },],
    };
    __decorate([
        bind
    ], ScrollComponent.prototype, "recalcScrollTop", null);
    __decorate([
        bind
    ], ScrollComponent.prototype, "recalcScrollLeft", null);
    __decorate([
        bind
    ], ScrollComponent.prototype, "recalcThumbXPosition", null);
    __decorate([
        bind
    ], ScrollComponent.prototype, "recalcThumbYPosition", null);
    __decorate([
        bind
    ], ScrollComponent.prototype, "resize", null);
    __decorate([
        bind
    ], ScrollComponent.prototype, "recalcThumbSize", null);
    __decorate([
        bind
    ], ScrollComponent.prototype, "checkScrollIsDisplay", null);
    __decorate([
        bind
    ], ScrollComponent.prototype, "recalcMaxThumbPosition", null);
    __decorate([
        bind
    ], ScrollComponent.prototype, "recalcMaxScrollPosition", null);
    __decorate([
        bind
    ], ScrollComponent.prototype, "onTouchMove", null);
    __decorate([
        bind
    ], ScrollComponent.prototype, "onTouchEnd", null);
    __decorate([
        bind
    ], ScrollComponent.prototype, "clickTrackX", null);
    __decorate([
        bind
    ], ScrollComponent.prototype, "clickTrackY", null);
    __decorate([
        bind
    ], ScrollComponent.prototype, "startDrogThumbX", null);
    __decorate([
        bind
    ], ScrollComponent.prototype, "startDrogThumbY", null);
    __decorate([
        bind
    ], ScrollComponent.prototype, "thumbDraggingX", null);
    __decorate([
        bind
    ], ScrollComponent.prototype, "thumbDraggingY", null);
    __decorate([
        bind
    ], ScrollComponent.prototype, "endDragThumb", null);
    __decorate([
        bind
    ], ScrollComponent.prototype, "onWheel", null);
    return ScrollComponent;
}());
export { ScrollComponent };
//# sourceMappingURL=scroll.component.js.map