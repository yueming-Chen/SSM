import { TemplateRef, OnDestroy, QueryList, ElementRef, EventEmitter, AfterViewInit, AfterContentInit, Renderer, NgZone } from "@angular/core";
import { range, falsy } from "@ay/util";
import { Subscription } from "rxjs/Rx";
import { AnchorComponent } from "./anchor.component";
export declare type Position = {
    x: number;
    y: number;
};
export declare class ScrollComponent implements OnDestroy, AfterViewInit, AfterContentInit {
    private _renderer;
    private _ngZone;
    private _elementRef;
    _AnchorQueryList$: Subscription;
    private _lastThumbXPosition;
    private _lastThumbYPosition;
    private _draggingX;
    private _draggingY;
    private _lastPageX;
    private _lastPageY;
    private _lastTouchXPosition;
    private _lastTouchYPosition;
    private _scrollTopChangeThrottle$;
    private _scrollTopChangeDebounce$;
    falsy: typeof falsy;
    range: typeof range;
    thumbXSize: number;
    thumbYSize: number;
    displayX: boolean;
    displayY: boolean;
    maxThumbXPosition: number;
    maxThumbYPosition: number;
    maxScrollXPosition: number;
    maxScrollYPosition: number;
    private mutationThrottleTimeout;
    private mutationObserver;
    nativeElement: HTMLDivElement;
    scrollX: boolean;
    scrollY: boolean;
    showX: boolean;
    showY: boolean;
    /** show */
    private _show;
    /** active */
    private _active;
    activeChange: EventEmitter<string>;
    active: string;
    show: boolean;
    /** scrollLeft */
    private _scrollLeft;
    scrollLeftChange: EventEmitter<number>;
    scrollLeft: number;
    /** thumbXPosition */
    private _thumbXPosition;
    thumbXPosition: number;
    /** scrollTop */
    private _scrollTop;
    scrollTopChange: EventEmitter<number>;
    scrollTop: number;
    /** thumbYPosition */
    private _thumbYPosition;
    thumbYPosition: number;
    /** height */
    private _height;
    heightChange: EventEmitter<number>;
    height: number;
    /** width */
    private _width;
    widthChange: EventEmitter<string>;
    width: string;
    defaultContentTemplate: ElementRef;
    contentTemplate: TemplateRef<any>;
    contentElement: ElementRef;
    thumbXElement: ElementRef;
    thumbYElement: ElementRef;
    trackXElement: ElementRef;
    trackYElement: ElementRef;
    wrapperElement: ElementRef;
    AnchorQueryList: QueryList<AnchorComponent>;
    constructor(_renderer: Renderer, _ngZone: NgZone, _elementRef: ElementRef);
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    _wrapperHeight: number;
    readonly wrapperHeight: number;
    readonly wrapperWidth: any;
    readonly contentHeight: any;
    readonly contentWidth: any;
    readonly thumbYHeight: any;
    readonly thumbXWidth: any;
    recalcScrollTop(): void;
    recalcScrollLeft(): void;
    recalcThumbXPosition(): void;
    recalcThumbYPosition(): void;
    showError(err: any): void;
    resize(): void;
    recalcThumbSize(): void;
    checkScrollIsDisplay(): void;
    recalcMaxThumbPosition(): void;
    recalcMaxScrollPosition(): void;
    onTouchStart(e: TouchEvent): void;
    onTouchMove(e: TouchEvent): void;
    onTouchEnd(e: TouchEvent): void;
    makeTrackClickable(): void;
    clickTrackX(e: MouseEvent): void;
    clickTrackY(e: MouseEvent): void;
    makeThumbDraggable(): void;
    startDrogThumbX(e: MouseEvent): void;
    startDrogThumbY(e: MouseEvent): void;
    thumbDraggingX(e: MouseEvent): void;
    thumbDraggingY(e: MouseEvent): void;
    preventDefaultEvent(e: Event): void;
    endDragThumb(e: MouseEvent): void;
    onWheel(e: any): boolean;
    scrollContent(x: number, y: number): void;
    scrollThumb(x: number, y: number): void;
    navigateTo(anchorName: string): void;
    smoothScrollContent(x: number, y: number, duration?: number, fn?: (t: number) => number): void;
    private caleSmoothPosition(start, end, elapsed, duration);
    easeInOutCubic(t: number): number;
}
