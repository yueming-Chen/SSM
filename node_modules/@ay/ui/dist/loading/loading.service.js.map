{"version":3,"sources":["../../tmp/loading/loading.service.ts"],"names":[],"mappings":"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","file":"loading.service.js","sourceRoot":"","sourcesContent":["import { Component, Output, Input, EventEmitter, Renderer, HostBinding, ElementRef, Injectable } from \"@angular/core\";\n\n\nexport class LoadingService {\n  /** color */\n  private _color: string;\n\n  \n  public colorChange: EventEmitter<string> = new EventEmitter<string>();\n\n  \n  public get color(): string {\n    return this._color;\n  }\n\n  public set color(color: string) {\n    if (this._color === color) return;\n    this._color = color;\n    this.colorChange.emit(this._color);\n  }\n\n  /** progress */\n  private _progress: number = 50;\n\n  \n  public progressChange: EventEmitter<number> = new EventEmitter<number>();\n\n  \n  public get progress(): number {\n    return this._progress;\n  }\n\n  public set progress(progress: number) {\n    if (this._progress === progress) return;\n    this._progress = progress;\n    this.isComplete = this.progress >= 100;\n    if (this.progress > 0 && !this.isComplete) this.display = true;\n    this.progressChange.emit(this._progress);\n  }\n\n\n  /** complete */\n  private _isComplete: boolean;\n\n  \n  public completeChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  \n  public get isComplete(): boolean {\n    return this._isComplete;\n  }\n\n  public set isComplete(isComplete: boolean) {\n    if (this._isComplete === isComplete) return;\n    this._isComplete = isComplete;\n    if (this._isComplete === true) this.progress = 100;\n    this.completeChange.emit(this._isComplete);\n  }\n\n  /** display */\n  private _display: boolean;\n\n  \n  public displayChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  \n  public get display(): boolean {\n    return this._display;\n  }\n\n  public set display(display: boolean) {\n    if (this._display === display) return;\n    this._display = display;\n    this.displayChange.emit(this._display);\n  }\n\n  public complete() {\n    this.progress = 0;\n    this.display = true;\n    this.isComplete = true;\n  }\n\n  public constructor() {\n    this.completeChange\n      .filter(complete => complete)\n      .delay(1000)\n      .do(next => this.display = false)\n      .delay(300)\n      .subscribe(complete => this.progress = 0);\n  }\n\n  public expect(ms) {\n    let i = 0;\n    let times = ms / 300;\n    let level = (100 - this.progress) / times;\n    let lastProgress = this.progress;\n    let timer = setInterval(() => {\n      if (lastProgress != this.progress || i == times) {\n        clearInterval(timer);\n        return;\n      }\n      lastProgress = this.progress = Math.min(this.progress + level, 92);\n      i++;\n    }, 300);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'colorChange': [{ type: Output },],\n'color': [{ type: Input },],\n'progressChange': [{ type: Output },],\n'progress': [{ type: Input },],\n'completeChange': [{ type: Output },],\n'isComplete': [{ type: Input },],\n'displayChange': [{ type: Output },],\n'display': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}