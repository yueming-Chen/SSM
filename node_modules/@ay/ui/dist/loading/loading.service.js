import { Output, Input, EventEmitter, Injectable } from "@angular/core";
var LoadingService = (function () {
    function LoadingService() {
        var _this = this;
        this.colorChange = new EventEmitter();
        /** progress */
        this._progress = 50;
        this.progressChange = new EventEmitter();
        this.completeChange = new EventEmitter();
        this.displayChange = new EventEmitter();
        this.completeChange
            .filter(function (complete) { return complete; })
            .delay(1000)
            .do(function (next) { return _this.display = false; })
            .delay(300)
            .subscribe(function (complete) { return _this.progress = 0; });
    }
    Object.defineProperty(LoadingService.prototype, "color", {
        get: function () {
            return this._color;
        },
        set: function (color) {
            if (this._color === color)
                return;
            this._color = color;
            this.colorChange.emit(this._color);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoadingService.prototype, "progress", {
        get: function () {
            return this._progress;
        },
        set: function (progress) {
            if (this._progress === progress)
                return;
            this._progress = progress;
            this.isComplete = this.progress >= 100;
            if (this.progress > 0 && !this.isComplete)
                this.display = true;
            this.progressChange.emit(this._progress);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoadingService.prototype, "isComplete", {
        get: function () {
            return this._isComplete;
        },
        set: function (isComplete) {
            if (this._isComplete === isComplete)
                return;
            this._isComplete = isComplete;
            if (this._isComplete === true)
                this.progress = 100;
            this.completeChange.emit(this._isComplete);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoadingService.prototype, "display", {
        get: function () {
            return this._display;
        },
        set: function (display) {
            if (this._display === display)
                return;
            this._display = display;
            this.displayChange.emit(this._display);
        },
        enumerable: true,
        configurable: true
    });
    LoadingService.prototype.complete = function () {
        this.progress = 0;
        this.display = true;
        this.isComplete = true;
    };
    LoadingService.prototype.expect = function (ms) {
        var _this = this;
        var i = 0;
        var times = ms / 300;
        var level = (100 - this.progress) / times;
        var lastProgress = this.progress;
        var timer = setInterval(function () {
            if (lastProgress != _this.progress || i == times) {
                clearInterval(timer);
                return;
            }
            lastProgress = _this.progress = Math.min(_this.progress + level, 92);
            i++;
        }, 300);
    };
    LoadingService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    LoadingService.ctorParameters = function () { return []; };
    LoadingService.propDecorators = {
        'colorChange': [{ type: Output },],
        'color': [{ type: Input },],
        'progressChange': [{ type: Output },],
        'progress': [{ type: Input },],
        'completeChange': [{ type: Output },],
        'isComplete': [{ type: Input },],
        'displayChange': [{ type: Output },],
        'display': [{ type: Input },],
    };
    return LoadingService;
}());
export { LoadingService };
//# sourceMappingURL=loading.service.js.map