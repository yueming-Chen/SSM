import * as moment from "moment";
import { leftPad } from "@ay/util";
export var TableFilterFn = null;
export var TableFilter = {
    number: function (value, condition) {
        var OP_REGEX = /^(\>|\<|\=|\>\=|\<\=)(\d+\.?\d*)$/; //== >= <= > <
        var TO_REGEX = /^(\d+\.?\d*)\~(\d+\.?\d*)$/; // 10 ~ 20
        if (OP_REGEX.test(condition)) {
            return condition.replace(OP_REGEX, function (substring) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                var op = args[0], target = args[1];
                var ret;
                switch (op) {
                    case '>':
                        ret = value > target;
                        break;
                    case '<':
                        ret = value < target;
                        break;
                    case '>=':
                        ret = value >= target;
                        break;
                    case '<=':
                        ret = value <= target;
                        break;
                    case '=':
                        ret = value == target;
                        break;
                    default:
                        return 'false';
                }
                return ret.toString();
            }) === 'true';
        }
        else if (TO_REGEX.test(condition)) {
            return condition.replace(TO_REGEX, function (substring) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                return (value >= args[0] && value <= args[1]).toString();
            }) === 'true';
        }
        else {
            return +value === +condition;
        }
    },
    string: function (value, condition) { return value.indexOf(condition) !== -1; },
    moment: function (value, condition) {
        var OP_REGEX = /^(\>|\<|\=|\>\=|\<\=)([\d]{0,4})([\/\-\:]*)([\d]{0,2})([\/\-\:]*)([\d]{0,2})$/;
        var TO_REGEX = /^([\d]{0,4})([\/\-\:]*)([\d]{0,2})([\/\-\:]*)([\d]{0,2})(\~)([\d]{0,4})([\/\-\:]*)([\d]{0,2})([\/\-\:]*)([\d]{0,2})$/;
        if (OP_REGEX.test(condition)) {
            return condition.replace(OP_REGEX, function (substring) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                var numValue = 0;
                var numTarget = 0;
                args = args.filter(function (arg) { return arg != ''; });
                var op = args.shift();
                var ret = false;
                args.pop();
                if (args.length == 1) {
                    numValue = +value.format("YYYY");
                    numTarget = +(leftPad(args[0], 4, "0"));
                }
                else if (args[1] == '/' || args[1] == '-') {
                    if (args.length == 3) {
                        numValue = +value.format("MMDD");
                        numTarget = +(leftPad(args[0], 2, "0") + leftPad(args[2], 2, "0"));
                    }
                    else if (args.length == 5) {
                        numValue = +value.format("YYYYMMDD");
                        numTarget = +(leftPad(args[0], 4, "0") + leftPad(args[2], 2, "0") + leftPad(args[4], 2, "0"));
                    }
                    else {
                        return "false";
                    }
                }
                else {
                    if (args.length == 3) {
                        numValue = +value.format("HHmm");
                        numTarget = +(leftPad(args[0], 2, "0") + leftPad(args[2], 2, "0"));
                    }
                    else if (args.length == 5) {
                        numValue = +value.format("HHmmss");
                        numTarget = +(leftPad(args[0], 4, "0") + leftPad(args[2], 2, "0") + leftPad(args[4], 2, "0"));
                    }
                    else {
                        return "false";
                    }
                }
                switch (op) {
                    case '>':
                        ret = numValue > numTarget;
                        break;
                    case '<':
                        ret = numValue < numTarget;
                        break;
                    case '>=':
                        ret = numValue >= numTarget;
                        break;
                    case '<=':
                        ret = numValue <= numTarget;
                        break;
                    case '=':
                        ret = numValue == numTarget;
                        break;
                    default:
                        return 'false';
                }
                return ret.toString();
            }) === "true";
        }
        else if (TO_REGEX.test(condition)) {
            return condition.replace(TO_REGEX, function (substring) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                var numValue = 0;
                var numMin = 0;
                var numMax = 0;
                args = args.filter(function (arg) { return arg != ''; });
                args.pop();
                if (args.length == 3) {
                    numValue = +value.format("YYYY");
                    numMin = +(leftPad(args[0], 4, "0"));
                    numMax = +(leftPad(args[2], 4, "0"));
                }
                else if (args[1] == '/' || args[1] == '-') {
                    if (args.length == 7) {
                        numValue = +value.format("MMDD");
                        numMin = +(leftPad(args[0], 2, "0") + leftPad(args[2], 2, "0"));
                        numMax = +(leftPad(args[4], 2, "0") + leftPad(args[6], 2, "0"));
                    }
                    else if (args.length == 11) {
                        numValue = +value.format("YYYYMMDD");
                        numMin = +(leftPad(args[0], 4, "0") + leftPad(args[2], 2, "0") + leftPad(args[4], 2, "0"));
                        numMax = +(leftPad(args[6], 4, "0") + leftPad(args[8], 2, "0") + leftPad(args[10], 2, "0"));
                    }
                    else {
                        return "false";
                    }
                }
                else {
                    if (args.length == 7) {
                        numValue = +value.format("HHmm");
                        numMin = +(leftPad(args[0], 2, "0") + leftPad(args[2], 2, "0"));
                        numMax = +(leftPad(args[4], 2, "0") + leftPad(args[6], 2, "0"));
                    }
                    else if (args.length == 11) {
                        numValue = +value.format("HHmmss");
                        numMin = +(leftPad(args[0], 4, "0") + leftPad(args[2], 2, "0") + leftPad(args[4], 2, "0"));
                        numMax = +(leftPad(args[6], 4, "0") + leftPad(args[8], 2, "0") + leftPad(args[10], 2, "0"));
                    }
                    else {
                        return "false";
                    }
                }
                return (numValue >= numMin && numValue <= numMax).toString();
            }) === "true";
        }
        else {
            return false;
        }
    },
    timestamp: function (value, condition) {
        return TableFilter.moment(moment(value), condition);
    }
};
// console.log(momentColumnFilter(moment(), ">2018/01/02"));
// console.log(momentColumnFilter(moment(), ">2017/01/02"));
// console.log(momentColumnFilter(moment(), ">03:04:05"));
// console.log(momentColumnFilter(moment(), ">01/02"));
// console.log(momentColumnFilter(moment(), ">01/02"));
// console.log(momentColumnFilter(moment(), ">01/02"));
// console.log(momentColumnFilter(moment(), ">03:04"));
// console.log(momentColumnFilter(moment(), "03:00~19:00"));
// console.log(momentColumnFilter(moment(), "02/18~02/30"));
// console.log(numberColumnFilter(29, "30~50"));
// console.log(numberColumnFilter(30, "30~50"));
// console.log(numberColumnFilter(31, "30~50"));
// console.log(numberColumnFilter(49, "30~50"));
// console.log(numberColumnFilter(50, "30~50"));
// console.log(numberColumnFilter(51, "30~50"));
//# sourceMappingURL=filter.js.map