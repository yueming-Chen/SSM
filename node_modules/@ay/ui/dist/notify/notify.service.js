import { Injectable, EventEmitter } from "@angular/core";
var NotifyService = (function () {
    function NotifyService() {
        this.defaultTimeout = 0;
        this.maxStack = 6;
        this.list = [];
        this.createNotifyEvent = new EventEmitter();
        this.setTimeoutEvent = new EventEmitter();
    }
    NotifyService.prototype.setDefaultTimeout = function (timeout) {
        this.defaultTimeout = timeout;
    };
    NotifyService.prototype.setMaxStack = function (count) {
        this.maxStack = count;
    };
    NotifyService.prototype.removeFromArray = function (array, item) {
        var index = array.indexOf(item);
        if (index === -1)
            return;
        array.splice(index, 1);
    };
    NotifyService.prototype.generatorDestroyer = function (toasty) {
        var _this = this;
        var destroy = function () {
            toasty.status = "hidden";
            setTimeout(function () {
                _this.removeFromArray(_this.list, toasty);
            }, 500);
        };
        toasty.destroy = destroy;
        return toasty.destroy;
    };
    NotifyService.prototype.add = function (toasty) {
        if (toasty.timeout === null)
            toasty.timeout = this.defaultTimeout;
        this.list.push(toasty);
        //提示數量大於最大限制時，刪除舊提示
        if (this.list.length > this.maxStack) {
            this.list.shift().destroy();
        }
        this.createNotifyEvent.next(toasty);
        //產生 Notify解構元、計時器、計時器解構元;
        this.generatorDestroyer(toasty);
        return toasty;
    };
    NotifyService.prototype.info = function (title, message, timeout) {
        if (message === void 0) { message = ""; }
        if (timeout === void 0) { timeout = this.defaultTimeout; }
        return this.add(new Notify(title, message, timeout, "fa-bell"));
    };
    NotifyService.prototype.success = function (title, message, timeout) {
        if (message === void 0) { message = ""; }
        if (timeout === void 0) { timeout = this.defaultTimeout; }
        return this.add(new Notify(title, message, timeout, "fa-check", "#FFFFFF", "#32B867"));
    };
    NotifyService.prototype.error = function (title, message, timeout) {
        if (message === void 0) { message = ""; }
        if (timeout === void 0) { timeout = this.defaultTimeout; }
        return this.add(new Notify(title, message, timeout, "fa-exclamation-triangle", "#FFFFFF", "#FF414A"));
    };
    NotifyService.prototype.warning = function (title, message, timeout) {
        if (message === void 0) { message = ""; }
        if (timeout === void 0) { timeout = this.defaultTimeout; }
        return this.add(new Notify(title, message, timeout, "fa-exclamation", "#FFFFFF", "#FFB141"));
    };
    NotifyService.prototype.loading = function (title, message, timeout) {
        if (message === void 0) { message = ""; }
        if (timeout === void 0) { timeout = this.defaultTimeout; }
        return this.add(new Notify(title, message, timeout, ['fa-refresh', 'fa-spin'], "#FFFFFF", "#34495e"));
    };
    NotifyService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NotifyService.ctorParameters = function () { return []; };
    return NotifyService;
}());
export { NotifyService };
var Notify = (function () {
    function Notify(title, message, closeTimeout, 
        /** 可支援格式參照 ngClass: https://angular.io/docs/ts/latest/api/common/index/NgClass-directive.html */
        icon, color, backgroundColor) {
        if (message === void 0) { message = ""; }
        if (closeTimeout === void 0) { closeTimeout = 0; }
        if (icon === void 0) { icon = ""; }
        if (color === void 0) { color = "#333333"; }
        if (backgroundColor === void 0) { backgroundColor = "#FFFFFF"; }
        this.title = title;
        this.message = message;
        this.icon = icon;
        this.color = color;
        this.backgroundColor = backgroundColor;
        this.status = "normal";
        this.showClose = true;
        this._timeout = 0;
        this.timerCount = 0;
        this.onDestroyEvent = new EventEmitter();
        this.timeCountChange = new EventEmitter();
        //計時器 的解構元，備註：會被 Notify 的解構元呼叫到
        this._destroyTimer = function () { };
        this.timeout = closeTimeout;
    }
    Notify.prototype.update = function (title, message, timeout, icon, color, backgroundColor) {
        if (typeof title == "string")
            this.title = title;
        if (typeof message == "string")
            this.message = message;
        if (typeof timeout == "number")
            this.timeout = timeout;
        if (icon != null)
            this.icon = icon;
        if (typeof color == "string")
            this.color = color;
        if (typeof backgroundColor == "string")
            this.backgroundColor = backgroundColor;
    };
    Object.defineProperty(Notify.prototype, "timeout", {
        get: function () {
            return this._timeout;
        },
        set: function (num) {
            if (this._timeout != num) {
                this._timeout = num;
                this._generatorTimer();
            }
            //沒有設定關閉時間則顯示關閉按鈕
            this.showClose = (this.timeout <= 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Notify.prototype, "destroy", {
        get: function () {
            return this._destroy ? this._destroy : function () { };
        },
        set: function (_destroyFunction) {
            var _this = this;
            this._destroy = (function () {
                _destroyFunction();
                _this._destroyTimer();
                _this.onDestroyEvent.next(_this);
                _this._destroy = null;
            }).bind(this);
        },
        enumerable: true,
        configurable: true
    });
    Notify.prototype._generatorTimer = function () {
        var _this = this;
        //解構舊的計時器
        this._destroyTimer();
        this.timerCount = this.timeout;
        if (this.timeout > 0) {
            //產生計時器
            var counter_1 = null;
            var timeAction = function () {
                _this.timerCount -= 1;
                _this.timeCountChange.next(_this);
                if (_this.timerCount <= 0)
                    _this.destroy();
            };
            counter_1 = setInterval(timeAction, 1000);
            this._destroyTimer = function () { clearTimeout(counter_1); };
        }
    };
    return Notify;
}());
export { Notify };
//# sourceMappingURL=notify.service.js.map