var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Directive, Output, Input, EventEmitter, ElementRef, Renderer } from "@angular/core";
import { bind } from "@ay/util";
var ShowDirective = (function () {
    function ShowDirective(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        /** ngShow */
        this._show = true;
        this.showChange = new EventEmitter();
        this._lastDisplay = "block";
    }
    Object.defineProperty(ShowDirective.prototype, "show", {
        get: function () {
            return this._show;
        },
        set: function (ngShow) {
            if (this._show === ngShow)
                return;
            this._show = ngShow;
            this.showChange.emit(this._show);
        },
        enumerable: true,
        configurable: true
    });
    ShowDirective.prototype.ngAfterContentInit = function () {
        this.showChange.subscribe(this.afterShowChange);
        this.afterShowChange(this.show);
    };
    ShowDirective.prototype.afterShowChange = function (show) {
        if (show) {
            if (this.element.nativeElement.style.display === "none") {
                this.renderer.setElementStyle(this.element.nativeElement, "display", this._lastDisplay);
            }
        }
        else {
            this._lastDisplay = this.element.nativeElement.style.display;
            this.renderer.setElementStyle(this.element.nativeElement, "display", "none");
        }
    };
    ShowDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[show]"
                },] },
    ];
    /** @nocollapse */
    ShowDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer, },
    ]; };
    ShowDirective.propDecorators = {
        'showChange': [{ type: Output },],
        'show': [{ type: Input },],
    };
    __decorate([
        bind
    ], ShowDirective.prototype, "afterShowChange", null);
    return ShowDirective;
}());
export { ShowDirective };
//# sourceMappingURL=show.directive.js.map