{"version":3,"sources":["../../tmp/show/show.directive.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,SAAA,EAAW,MAAA,EAAQ,KAAA,EAAO,YAAA,EAAc,UAAA,EAAY,QAAA,EAAS,MAAO,eAAA,CAAgB;AAC7F,OAAO,EAAE,IAAA,EAAK,MAAO,UAAA,CAAW;AAGhC;IAoBE,uBAA0B,OAAmB,EAAS,QAAkB;QAA9C,YAAO,GAAP,OAAO,CAAY;QAAS,aAAQ,GAAR,QAAQ,CAAU;QAnBxE,aAAa;QACL,UAAK,GAAY,IAAI,CAAC;QAGvB,eAAU,GAA0B,IAAI,YAAY,EAAW,CAAC;QAa/D,iBAAY,GAAG,OAAO,CAAC;IAE6C,CAAC;IAZ7E,sBAAW,+BAAI;aAAf;YACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC;aAED,UAAgB,MAAe;YAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,MAAM,CAAC;gBAAC,MAAM,CAAC;YAClC,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;YACpB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnC,CAAC;;;OANA;IAYM,0CAAkB,GAAzB;QACE,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAChD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC;IAGM,uCAAe,GAAtB,UAAuB,IAAI;QACzB,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACT,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,KAAK,MAAM,CAAC,CAAC,CAAC;gBACxD,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YAC1F,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC;YAC7D,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;QAC/E,CAAC;IACH,CAAC;IACI,wBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,QAAQ;iBACnB,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,4BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,UAAU,GAAG;QACpB,EAAC,IAAI,EAAE,QAAQ,GAAG;KACjB,EAH6F,CAG7F,CAAC;IACK,4BAAc,GAA2C;QAChE,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;QACjC,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;KACzB,CAAC;IAvBA;QADC,IAAI;wDAUJ;IAeH,oBAAC;CApDD,AAoDC,IAAA;SApDY,aAAa","file":"show.directive.js","sourceRoot":"","sourcesContent":["import { Directive, Output, Input, EventEmitter, ElementRef, Renderer } from \"@angular/core\";\nimport { bind } from \"@ay/util\";\n\n\nexport class ShowDirective {\n  /** ngShow */\n  private _show: boolean = true;\n\n  \n  public showChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  \n  public get show(): boolean {\n    return this._show;\n  }\n\n  public set show(ngShow: boolean) {\n    if (this._show === ngShow) return;\n    this._show = ngShow;\n    this.showChange.emit(this._show);\n  }\n\n  private _lastDisplay = \"block\";\n\n  public constructor(public element: ElementRef, public renderer: Renderer) { }\n\n  public ngAfterContentInit() {\n    this.showChange.subscribe(this.afterShowChange);\n    this.afterShowChange(this.show);\n  }\n\n  @bind\n  public afterShowChange(show) {\n    if (show) {\n      if (this.element.nativeElement.style.display === \"none\") {\n        this.renderer.setElementStyle(this.element.nativeElement, \"display\", this._lastDisplay);\n      }\n    } else {\n      this._lastDisplay = this.element.nativeElement.style.display;\n      this.renderer.setElementStyle(this.element.nativeElement, \"display\", \"none\");\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: \"[show]\"\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'showChange': [{ type: Output },],\n'show': [{ type: Input },],\n};\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}