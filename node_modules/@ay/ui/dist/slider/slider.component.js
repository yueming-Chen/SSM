var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Component, Input, Output, EventEmitter, Renderer, ElementRef, ViewChild, HostListener, ViewEncapsulation } from "@angular/core";
import { DomSanitizer } from "@angular/platform-browser";
import { bind } from "@ay/util/dist";
var SliderComponent = (function () {
    function SliderComponent(elementRef, renderer, sanitizer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.sanitizer = sanitizer;
        this.isDragging = false;
        this.tmpWidth = 0;
        this.tmpLeft = 0;
        this.isStart = false;
        this.thumbWidth = null;
        this.thumbBackground = "#C3C3C3";
        // 最小值
        this.min = null;
        // 最大值
        this.max = null;
        /** value */
        this._data = 0;
        this.dataChange = new EventEmitter();
        this.floatable = false;
    }
    Object.defineProperty(SliderComponent.prototype, "data", {
        get: function () {
            return this._data;
        },
        set: function (value) {
            value = !this.floatable ? parseInt(value + "") : parseFloat(value + "");
            if (isNaN(value))
                value = this.min;
            else if (this.max !== null && value > this.max)
                value = this.max;
            else if (this.min !== null && value < this.min)
                value = this.min;
            this._data = value;
            this.renderer.setElementStyle(this.thumbDom.nativeElement, "left", value / (this.max - this.min) * 100 + "%");
            if (this.isStart) {
                this.dataChange.emit(this._data);
            }
        },
        enumerable: true,
        configurable: true
    });
    SliderComponent.prototype.click = function (event) {
        this.startDragging(event);
        this.drag(event);
        this.endDragging(event);
    };
    SliderComponent.prototype.startDragging = function (event) {
        this.isDragging = true;
        var rect = this.elementRef.nativeElement.getBoundingClientRect();
        this.tmpWidth = rect.width;
        this.tmpLeft = rect.left;
        window.addEventListener("mousemove", this.drag);
        window.addEventListener("mouseup", this.endDragging);
    };
    SliderComponent.prototype.drag = function (event) {
        if (!this.isDragging)
            return;
        this.data = (event.pageX - this.tmpLeft) / this.tmpWidth * (this.max - this.min);
    };
    SliderComponent.prototype.endDragging = function (event) {
        window.removeEventListener("mousemove", this.drag);
        window.removeEventListener("mouseup", this.endDragging);
        this.isDragging = false;
    };
    SliderComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.isStart = true;
        setTimeout(function (f) { return _this.thumbWidth = _this.thumbDom.nativeElement.offsetHeight; }, 100);
    };
    SliderComponent.decorators = [
        { type: Component, args: [{
                    selector: "ay-slider",
                    template: "\n    <div class=\"track\" #bar=\"\" [style.background]=\"sanitizer.bypassSecurityTrustStyle(trackBackground)\"></div><div class=\"thumb\" #thumb=\"\" [style.background]=\"sanitizer.bypassSecurityTrustStyle(thumbBackground)\" [style.width.px]=\"thumbWidth\"></div>\n  ",
                    styles: ["\n    ay-slider {\n      display: inline-block;\n      position: relative;\n      width: 100%;\n      padding: 0; }\n      ay-slider .track {\n        position: relative;\n        width: 100%;\n        height: .4em;\n        top: .2em;\n        border-radius: .2em; }\n      ay-slider .thumb {\n        position: absolute;\n        top: 0;\n        left: 0;\n        background-color: #F2F2F2;\n        border-width: 1px;\n        border-radius: 100%;\n        border: 1px solid #FFF;\n        box-shadow: 0 1px 7px rgba(0, 0, 0, 0.05), 0 7px 17px rgba(0, 0, 0, 0.1);\n        z-index: 200;\n        transform: translateX(-0.4em);\n        height: .8em;\n        width: .8em;\n        cursor: pointer;\n        box-sizing: border-box; }\n  "],
                    encapsulation: ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    SliderComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer, },
        { type: DomSanitizer, },
    ]; };
    SliderComponent.propDecorators = {
        'thumbDom': [{ type: ViewChild, args: ["thumb",] },],
        'track': [{ type: ViewChild, args: ["track",] },],
        'trackBackground': [{ type: Input },],
        'thumbBackground': [{ type: Input },],
        'min': [{ type: Input },],
        'max': [{ type: Input },],
        'dataChange': [{ type: Output },],
        'data': [{ type: Input },],
        'floatable': [{ type: Input },],
        'click': [{ type: HostListener, args: ["click", ['$event'],] },],
        'startDragging': [{ type: HostListener, args: ["mousedown", ['$event'],] },],
    };
    __decorate([
        bind
    ], SliderComponent.prototype, "drag", null);
    __decorate([
        bind
    ], SliderComponent.prototype, "endDragging", null);
    return SliderComponent;
}());
export { SliderComponent };
//# sourceMappingURL=slider.component.js.map