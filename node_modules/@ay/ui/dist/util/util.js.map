{"version":3,"sources":["../../tmp/util/util.ts"],"names":[],"mappings":"AAEA,MAAM,sBAAsB,EAAE,EAAE,SAAS,EAAE,IAAI;IAC7C,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACT,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC9B,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACjC,CAAC;AACH,CAAC;AAED,MAAM,oBAAoB,KAAU;IAClC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACd,KAAK,EAAE;YACL,MAAM,CAAC,IAAI,CAAC;QAEd,KAAK,OAAO,CAAC;QACb,KAAK,GAAG;YACN,MAAM,CAAC,KAAK,CAAC;QAEf;YACE,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC;IACnB,CAAC;AACH,CAAC;AAED,+EAA+E;AAC/E,0GAA0G;AAC1G,MAAM,gBAAgB,KAAU;IAC9B,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACjB,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IACD,IAAI,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;IAC1B,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;AACvB,CAAC;AAED,+BAA+B;AAC/B,MAAM,mBAAmB,KAAU;IACjC,IAAM,IAAI,GAAG,OAAO,KAAK,CAAC;IAC1B,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,UAAU,CAAC,CAAC;AAC/D,CAAC;AAED,kEAAkE;AAClE,gCAAgC;AAChC,IAAI,SAAS,GAAG,CAAC,CAAC;AAClB,MAAM,mBAAmB,MAAc;IAAd,uBAAA,EAAA,cAAc;IACrC,MAAM,CAAC,SAAO,MAAM,SAAI,EAAE,SAAW,CAAC;AACxC,CAAC;AAKA,CAAC;AACF,MAAM,uBAAuB,QAAuB,EAAE,QAA2B,EAAE,QAA4B;IAC7G,EAAE,CAAC,CAAC,QAAQ,IAAI,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;QACtC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;IACtC,CAAC;IACD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QACb,QAAQ,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;IACrC,CAAC;AACH,CAAC;AAED,kBAAkB,QAAuB,EAAE,OAA0B,EAAE,KAAc;IACnF,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACZ,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,UAAA,CAAC;YACtD,QAAQ,CAAC,QAAQ,CAAC,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;IACL,CAAC;AACH,CAAC","file":"util.js","sourceRoot":"","sourcesContent":["import { ElementRef, Renderer } from '@angular/core';\n\nexport function toggleClass(el, className, bool) {\n  if (bool) {\n    el.classList.add(className);\n  } else {\n    el.classList.remove(className);\n  }\n}\n\nexport function toBoolean(value: any): boolean {\n  switch (value) {\n    case '':\n      return true;\n\n    case 'false':\n    case '0':\n      return false;\n\n    default:\n      return !!value;\n  }\n}\n\n// Check if given value is integer. Cast strings as potential integers as well.\n// See: http://stackoverflow.com/questions/14636536/how-to-check-if-a-variable-is-an-integer-in-javascript\nexport function isInt(value: any): boolean {\n  if (isNaN(value)) {\n    return false;\n  }\n  var x = parseFloat(value);\n  return (x | 0) === x;\n}\n\n// Similar to `lodash.isobject`\nexport function isObject(value: any): boolean {\n  const type = typeof value;\n  return !!value && (type === 'object' || type === 'function');\n}\n\n// Generate a unique id (unique within the entire client session).\n// Useful for temporary DOM ids.\nlet idCounter = 0;\nexport function uniqueId(prefix = 'uid') {\n  return `ngl_${prefix}_${++idCounter}`;\n}\n\nexport interface IReplaceClass {\n  renderer: Renderer;\n  element: ElementRef;\n};\nexport function replaceClass(instance: IReplaceClass, oldClass: string | string[], newClass?: string | string[]) {\n  if (oldClass && oldClass !== newClass) {\n    setClass(instance, oldClass, false);\n  }\n  if (newClass) {\n    setClass(instance, newClass, true);\n  }\n}\n\nfunction setClass(instance: IReplaceClass, klasses: string | string[], isAdd: boolean) {\n  if (klasses) {\n    (Array.isArray(klasses) ? klasses : [klasses]).forEach(k => {\n      instance.renderer.setElementClass(instance.element.nativeElement, k, isAdd);\n    });\n  }\n}\n"]}