export function toggleClass(el, className, bool) {
    if (bool) {
        el.classList.add(className);
    }
    else {
        el.classList.remove(className);
    }
}
export function toBoolean(value) {
    switch (value) {
        case '':
            return true;
        case 'false':
        case '0':
            return false;
        default:
            return !!value;
    }
}
// Check if given value is integer. Cast strings as potential integers as well.
// See: http://stackoverflow.com/questions/14636536/how-to-check-if-a-variable-is-an-integer-in-javascript
export function isInt(value) {
    if (isNaN(value)) {
        return false;
    }
    var x = parseFloat(value);
    return (x | 0) === x;
}
// Similar to `lodash.isobject`
export function isObject(value) {
    var type = typeof value;
    return !!value && (type === 'object' || type === 'function');
}
// Generate a unique id (unique within the entire client session).
// Useful for temporary DOM ids.
var idCounter = 0;
export function uniqueId(prefix) {
    if (prefix === void 0) { prefix = 'uid'; }
    return "ngl_" + prefix + "_" + ++idCounter;
}
;
export function replaceClass(instance, oldClass, newClass) {
    if (oldClass && oldClass !== newClass) {
        setClass(instance, oldClass, false);
    }
    if (newClass) {
        setClass(instance, newClass, true);
    }
}
function setClass(instance, klasses, isAdd) {
    if (klasses) {
        (Array.isArray(klasses) ? klasses : [klasses]).forEach(function (k) {
            instance.renderer.setElementClass(instance.element.nativeElement, k, isAdd);
        });
    }
}
//# sourceMappingURL=util.js.map