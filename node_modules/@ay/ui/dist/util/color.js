var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Subject } from "rxjs/Rx";
import { bind, leftPad } from "@ay/util/dist";
var Color = (function () {
    function Color() {
        this.redChange = new Subject();
        this.greenChange = new Subject();
        this.blueChange = new Subject();
        this.hexChange = new Subject();
        this.hueChange = new Subject();
        this.saturationChange = new Subject();
        this.brightnessChange = new Subject();
        this.redChange
            .merge(this.greenChange)
            .merge(this.blueChange)
            .debounceTime(100)
            .subscribe(this.onRGBChange, this.onError);
        this.hueChange
            .merge(this.saturationChange)
            .merge(this.brightnessChange)
            .debounceTime(100)
            .subscribe(this.onHSBChange, this.onError);
        this.hexChange
            .debounceTime(100)
            .subscribe(this.onHexChange, this.onError);
    }
    Object.defineProperty(Color.prototype, "red", {
        get: function () {
            return this._red;
        },
        set: function (red) {
            if (this._red === red)
                return;
            this._red = red;
            this.redChange.next(this._red);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "green", {
        get: function () {
            return this._green;
        },
        set: function (green) {
            if (this._green === green)
                return;
            this._green = green;
            this.greenChange.next(this._green);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "blue", {
        get: function () {
            return this._blue;
        },
        set: function (blue) {
            if (this._blue === blue)
                return;
            this._blue = blue;
            this.blueChange.next(this._blue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "hex", {
        get: function () {
            return this._hex;
        },
        set: function (hex) {
            if (this._hex === hex)
                return;
            this._hex = hex;
            this.hexChange.next(this._hex);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "hue", {
        get: function () {
            return this._hue;
        },
        set: function (hue) {
            if (this._hue === hue)
                return;
            this._hue = hue;
            this.hueChange.next(this._hue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "saturation", {
        get: function () {
            return this._saturation;
        },
        set: function (saturation) {
            if (this._saturation === saturation)
                return;
            this._saturation = saturation;
            this.saturationChange.next(this._saturation);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "brightness", {
        get: function () {
            return this._brightness;
        },
        set: function (brightness) {
            if (this._brightness === brightness)
                return;
            this._brightness = brightness;
            this.brightnessChange.next(this._brightness);
        },
        enumerable: true,
        configurable: true
    });
    Color.prototype.onRGBChange = function () {
        var _a = Color.RGBtoHSB(this.red, this.green, this.blue), hue = _a.hue, saturation = _a.saturation, brightness = _a.brightness;
        this.hue = hue;
        this.saturation = saturation;
        this.brightness = brightness;
        this.hex = Color.RGBtoHEX(this.red, this.green, this.blue);
    };
    Color.prototype.onHSBChange = function () {
        var _a = Color.HSBtoRGB(this.hue, this.saturation, this.brightness), red = _a.red, green = _a.green, blue = _a.blue;
        this.red = red;
        this.green = green;
        this.blue = blue;
    };
    Color.prototype.onHexChange = function () {
        var _a = Color.HEXtoRGB(this.hex), red = _a.red, green = _a.green, blue = _a.blue;
        this.red = red;
        this.green = green;
        this.blue = blue;
    };
    Color.prototype.onError = function (err) {
        console.error(err);
    };
    Color.RGBtoHEX = function (red, green, blue) {
        red = Math.round(red);
        green = Math.round(green);
        blue = Math.round(blue);
        return ("#" + leftPad(red.toString(16), 2, '0') + leftPad(green.toString(16), 2, '0') + leftPad(blue.toString(16), 2, '0')).toUpperCase();
    };
    Color.HEXtoRGB = function (hex) {
        if (hex === undefined)
            return { red: 0, green: 0, blue: 0 };
        if (hex.match(/^\#[A-Z0-9]{6}$/ig)) {
            return {
                red: parseInt(hex.substr(1, 2), 16),
                green: parseInt(hex.substr(3, 2), 16),
                blue: parseInt(hex.substr(5, 2), 16)
            };
        }
        else if (hex.match(/^\#[A-Z0-9]{3}$/ig)) {
            return {
                red: parseInt(hex.substr(1, 1).repeat(2), 16),
                green: parseInt(hex.substr(2, 1).repeat(2), 16),
                blue: parseInt(hex.substr(3, 1).repeat(2), 16)
            };
        }
        else {
            return { red: 0, green: 0, blue: 0 };
        }
    };
    Color.HSBtoRGB = function (hue, saturation, brightness) {
        saturation /= 100;
        brightness /= 100;
        var r, g, b, x, c;
        hue = (hue % 360) / 60;
        c = brightness * saturation;
        x = c * (1 - Math.abs(hue % 2 - 1));
        r = g = b = brightness - c;
        hue = ~~hue;
        r += [c, x, 0, 0, x, c][hue];
        g += [x, c, c, x, 0, 0][hue];
        b += [0, 0, x, c, c, x][hue];
        return {
            red: Math.round(r * 255),
            green: Math.round(g * 255),
            blue: Math.round(b * 255)
        };
    };
    Color.RGBtoHSB = function (red, green, blue) {
        red /= 255;
        green /= 255;
        blue /= 255;
        var H, S, V, C;
        V = Math.max(red, green, blue);
        C = V - Math.min(red, green, blue);
        H = (C === 0 ? null : V === red ? (green - blue) / C : V === green ? (blue - red) / C + 2 : (red - green) / C + 4);
        H = ((H + 360) % 6) * 60;
        S = C === 0 ? 0 : C / V;
        return { hue: H, saturation: S * 100, brightness: V * 100 };
    };
    Color.HEXtoHSB = function (hex) {
        var _a = Color.HEXtoRGB(hex), red = _a.red, green = _a.green, blue = _a.blue;
        return Color.RGBtoHSB(red, green, blue);
    };
    Color.HSBtoHEX = function (hue, saturation, brightness) {
        var _a = Color.HSBtoRGB(hue, saturation, brightness), red = _a.red, green = _a.green, blue = _a.blue;
        return Color.RGBtoHEX(red, green, blue);
    };
    Color.setBrightness = function (red, green, blue, Z) {
        if (Z < 0) {
            red = red - (red / 100 * (-Z));
            green = green - (green / 100 * (-Z));
            blue = blue - (blue / 100 * (-Z));
        }
        else {
            red = ((255 - red) / 100 * Z) + red;
            green = ((255 - green) / 100 * Z) + green;
            blue = ((255 - blue) / 100 * Z) + blue;
        }
        return { red: red, green: green, blue: blue };
    };
    Color.isLight = function (red, green, blue) {
        return (160 > Math.round((299 * red + 587 * green + 114 * blue) / 1000));
    };
    Color.adjustColorLevel = function (hex, level) {
        var numberOfRows = 20;
        var step = 100 / Math.ceil(numberOfRows / 2);
        var start_val = step * Math.floor(numberOfRows / 2);
        var _a = Color.HEXtoRGB(hex), red = _a.red, green = _a.green, blue = _a.blue;
        level += 10;
        var E = Color.setBrightness(red, green, blue, start_val - level * step);
        var N = Color.isLight(red, green, blue);
        return Color.RGBtoHEX(E.red, E.green, E.blue);
    };
    __decorate([
        bind
    ], Color.prototype, "onRGBChange", null);
    __decorate([
        bind
    ], Color.prototype, "onHSBChange", null);
    __decorate([
        bind
    ], Color.prototype, "onHexChange", null);
    return Color;
}());
export { Color };
//# sourceMappingURL=color.js.map