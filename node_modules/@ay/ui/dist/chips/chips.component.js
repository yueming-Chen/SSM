var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Component, HostListener, ViewChild, ContentChild, Input, EventEmitter, Output, ViewEncapsulation } from "@angular/core";
import { bind, defaults } from "@ay/util";
var ChipsComponent = (function () {
    function ChipsComponent() {
        this.choose = "";
        this.inputBackground = "none";
        this.autocomplete = false;
        this.editable = false;
        this.icon = "fa-times";
        this.limitDisplay = 5;
        this.inputPlaceholder = "";
        this.readonly = false;
        this.dataChange = new EventEmitter();
        this.inputDataChange = new EventEmitter();
        this.DefaultChipTemplate = null;
        this.chipTemplate = null;
        this.DefaultInputTemplate = null;
        this.inputTemplate = null;
        this.removable = true;
        this.data = this.data || [];
    }
    Object.defineProperty(ChipsComponent.prototype, "data", {
        get: function () {
            return this._data;
        },
        set: function (data) {
            if (this._data === data)
                return;
            this._data = data;
            this.dataChange.emit(this._data);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChipsComponent.prototype, "inputData", {
        get: function () {
            return this._inputData;
        },
        set: function (inputData) {
            if (this._inputData === inputData)
                return;
            this._inputData = inputData;
            this.inputDataChange.emit(this._inputData);
        },
        enumerable: true,
        configurable: true
    });
    ChipsComponent.prototype.ngAfterContentInit = function () {
        this.chipTemplate = defaults(this.chipTemplate, this.DefaultChipTemplate);
        this.inputTemplate = defaults(this.inputTemplate, this.DefaultInputTemplate);
    };
    ChipsComponent.prototype.removeItem = function (index, data) {
        this.data = this.data.filter(function (_data, _index) {
            return (data == _data && index == _index) ? false : true;
        });
    };
    ChipsComponent.prototype.focusChip = function (data, index) {
        if (this.choose === data) {
            this.editTarget = data;
        }
        else {
            this.thisData = this.choose = data;
            this.thisIndex = index;
        }
    };
    ChipsComponent.prototype.blurChip = function (data, index) {
        this.choose = "";
        this.thisData = "";
        this.thisIndex = 0;
    };
    ChipsComponent.prototype.inputEnter = function () {
        if (this.data.length < this.limitDisplay && this.inputData) {
            this.data.push(this.inputData);
        }
        this.inputData = "";
    };
    ChipsComponent.prototype.editFinish = function ($event) {
        var _this = this;
        $event.preventDefault();
        $event.target.blur();
        this.data = this.data.map(function (data, index) {
            return (data == _this.thisData && index == _this.thisIndex && $event.target.innerText) ? $event.target.innerText : data;
        });
    };
    ChipsComponent.prototype.autocompleteEnter = function (event) {
        var _this = this;
        setTimeout(function () {
            var val = event.target.value;
            if (val) {
                _this.inputData = _this.data.push(val);
                event.target.value = "";
            }
        }, 100);
    };
    ChipsComponent.prototype.KeyboardInput = function (event) {
        var back = (event.code == "Backspace") ? true : false;
        if (back) {
            this.removeItem(this.thisIndex, this.thisData);
        }
    };
    ChipsComponent.decorators = [
        { type: Component, args: [{
                    template: "\n    <ng-template #DefaultChipTemplate=\"\" let-index=\"i\" let-data=\"data\"><span class=\"ay-chip\">{{data}}</span></ng-template><div class=\"chips flex\"><ng-template [ngForOf]=\"data\" let-i=\"index\" let-data=\"\" ngFor=\"\"><div class=\"chip\" (focus)=\"focusChip(data,i)\" (blur)=\"blurChip(data,i)\" [class.choose]=\"choose == data\" [tabindex]=\"i\"><div class=\"text\" [attr.contenteditable]=\"editable &amp;&amp; editTarget==data\" (keydown.enter)=\"editFinish($event)\"><ng-template [ngTemplateOutlet]=\"chipTemplate\" [ngOutletContext]=\"{data:data,i:i}\"></ng-template></div><div class=\"cancelButton\" *ngIf=\"removable==true\" (click)=\"removeItem(i,data)\"><div class=\"fa\" [ngClass]=\"icon\"></div></div></div></ng-template><ng-template [ngTemplateOutlet]=\"inputTemplate\" [ngOutletContext]=\"{data:data,i:i}\"></ng-template><input class=\"input\" *ngIf=\"!readonly &amp;&amp; !autocomplete\" [(ngModel)]=\"inputData\" (keyup.enter)=\"inputEnter()\" [placeholder]=\"inputPlaceholder\" type=\"text\"><ay-autocomplete *ngIf=\"!readonly &amp;&amp; autocomplete\" [items]=\"limitdata\" maxCount=\"3\" (keydown.enter)=\"autocompleteEnter($event)\" [inputBackground]=\"inputBackground\"></ay-autocomplete></div>\n  ",
                    selector: 'ay-chips',
                    styles: ["\n    .test {\n      margin-top: 50px; }\n\n    .chips {\n      border-bottom: 1px solid #ddd;\n      padding-bottom: 5px;\n      margin: 5px 1px; }\n      .chips .input {\n        background: none;\n        border: 0px;\n        user-select: none;\n        display: flex;\n        justify-content: flex-start;\n        align-items: center;\n        height: 32px;\n        line-height: 32px;\n        margin: 8px 8px 0 0;\n        padding: 0 12px;\n        box-sizing: border-box;\n        max-width: 100%;\n        position: relative;\n        font-size: 1em; }\n        .chips .input:focus {\n          outline: none; }\n\n    .flex {\n      display: flex; }\n\n    .cancelButton {\n      cursor: pointer;\n      padding-left: 5px;\n      margin-left: 5px;\n      display: flex;\n      align-items: center; }\n\n    .chip {\n      cursor: default;\n      border-radius: 16px;\n      display: flex;\n      justify-content: flex-start;\n      align-items: center;\n      height: 32px;\n      line-height: 32px;\n      margin: 8px 8px 0 0;\n      padding: 0 12px;\n      box-sizing: border-box;\n      max-width: 100%;\n      position: relative;\n      background: #e0e0e0;\n      color: #424242; }\n      .chip.choose {\n        color: white;\n        background: #106cc8; }\n  "],
                    encapsulation: ViewEncapsulation.None,
                },] },
    ];
    /** @nocollapse */
    ChipsComponent.ctorParameters = function () { return []; };
    ChipsComponent.propDecorators = {
        'limitdata': [{ type: Input },],
        'inputBackground': [{ type: Input },],
        'autocomplete': [{ type: Input },],
        'editable': [{ type: Input },],
        'icon': [{ type: Input },],
        'limitDisplay': [{ type: Input },],
        'inputPlaceholder': [{ type: Input },],
        'removable': [{ type: Input },],
        'readonly': [{ type: Input },],
        'dataChange': [{ type: Output },],
        'data': [{ type: Input },],
        'inputDataChange': [{ type: Output },],
        'inputData': [{ type: Input },],
        'DefaultChipTemplate': [{ type: ViewChild, args: ["DefaultChipTemplate",] },],
        'chipTemplate': [{ type: ContentChild, args: ["chipTemplate",] },],
        'DefaultInputTemplate': [{ type: ViewChild, args: ["DefaultInputTemplate",] },],
        'inputTemplate': [{ type: ContentChild, args: ["inputTemplate",] },],
        'KeyboardInput': [{ type: HostListener, args: ['window:keydown', ['$event'],] },],
    };
    __decorate([
        bind
    ], ChipsComponent.prototype, "removeItem", null);
    return ChipsComponent;
}());
export { ChipsComponent };
//# sourceMappingURL=chips.component.js.map