var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Component, Output, EventEmitter, Input, ViewChild, ContentChild, ViewEncapsulation } from '@angular/core';
import * as _ from "lodash";
import * as moment from "moment";
import { leftPad, defaults, bind } from "@ay/util";
var TimeComponent = (function () {
    function TimeComponent() {
        this.timepicker = this;
        this.hours = _.range(0, 24, 1).map(function (hour) { return leftPad(hour, 2); });
        this.minutes = _.range(0, 60, 1).map(function (minute) { return leftPad(minute, 2); });
        this.seconds = _.range(0, 60, 1).map(function (second) { return leftPad(second, 2); });
        /** format */
        this._format = "HH:mm:ss";
        this.formatChange = new EventEmitter();
        /** data */
        this._data = "00:00:00";
        this.dataChange = new EventEmitter();
        /** hour */
        this._hour = "00";
        this.hourChange = new EventEmitter();
        /** minute */
        this._minute = "00";
        this.minuteChange = new EventEmitter();
        /** second */
        this._second = "00";
        this.secondChange = new EventEmitter();
        //- 樣板
        /** Hour */
        this.defaultHourTemplate = null;
        this.hourTemplate = null;
        /** HourDropdownDisplay */
        this.defaultHourDropdownDisplayTemplate = null;
        this.hourDropdownDisplayTemplate = null;
        /** HourDropdownItem */
        this.defaultHourDropdownItemTemplate = null;
        this.hourDropdownItemTemplate = null;
        /** Minute */
        this.defaultMinuteTemplate = null;
        this.minuteTemplate = null;
        /** MinuteDropdownDisplay */
        this.defaultMinuteDropdownDisplayTemplate = null;
        this.minuteDropdownDisplayTemplate = null;
        /** MinuteDropdownItem */
        this.defaultMinuteDropdownItemTemplate = null;
        this.minuteDropdownItemTemplate = null;
        /** Second */
        this.defaultSecondTemplate = null;
        this.secondTemplate = null;
        /** SecondDropdownDisplay */
        this.defaultSecondDropdownDisplayTemplate = null;
        this.secondDropdownDisplayTemplate = null;
        /** SecondDropdownItem */
        this.defaultSecondDropdownItemTemplate = null;
        this.secondDropdownItemTemplate = null;
        /** Spliter */
        this.defaultSpliterTemplate = null;
        this.spliterTemplate = null;
    }
    ;
    Object.defineProperty(TimeComponent.prototype, "format", {
        get: function () {
            return this._format;
        },
        set: function (format) {
            if (this._format === format)
                return;
            this._format = format;
            this.formatChange.emit(this._format);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeComponent.prototype, "data", {
        get: function () {
            return this._data;
        },
        set: function (data) {
            if (this._data === data)
                return;
            this._data = data;
            this.dataChange.emit(this._data);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeComponent.prototype, "hour", {
        get: function () {
            return this._hour;
        },
        set: function (hour) {
            if (this._hour === hour)
                return;
            this._hour = hour;
            this.hourChange.emit(this._hour);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeComponent.prototype, "minute", {
        get: function () {
            return this._minute;
        },
        set: function (minute) {
            if (this._minute === minute)
                return;
            this._minute = minute;
            this.minuteChange.emit(this._minute);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeComponent.prototype, "second", {
        get: function () {
            return this._second;
        },
        set: function (second) {
            if (this._second === second)
                return;
            this._second = second;
            this.secondChange.emit(this._second);
        },
        enumerable: true,
        configurable: true
    });
    TimeComponent.prototype.ngAfterContentInit = function () {
        this.hourTemplate = defaults(this.hourTemplate, this.defaultHourTemplate);
        this.hourDropdownDisplayTemplate = defaults(this.hourDropdownDisplayTemplate, this.defaultHourDropdownDisplayTemplate);
        this.hourDropdownItemTemplate = defaults(this.hourDropdownItemTemplate, this.defaultHourDropdownItemTemplate);
        this.minuteTemplate = defaults(this.minuteTemplate, this.defaultMinuteTemplate);
        this.minuteDropdownDisplayTemplate = defaults(this.minuteDropdownDisplayTemplate, this.defaultMinuteDropdownDisplayTemplate);
        this.minuteDropdownItemTemplate = defaults(this.minuteDropdownItemTemplate, this.defaultMinuteDropdownItemTemplate);
        this.secondTemplate = defaults(this.secondTemplate, this.defaultSecondTemplate);
        this.secondDropdownDisplayTemplate = defaults(this.secondDropdownDisplayTemplate, this.defaultSecondDropdownDisplayTemplate);
        this.secondDropdownItemTemplate = defaults(this.secondDropdownItemTemplate, this.defaultSecondDropdownItemTemplate);
        this.spliterTemplate = defaults(this.spliterTemplate, this.defaultSpliterTemplate);
        this.dataChange$ = this.dataChange.subscribe(this.updateFromData, this.showError);
        this.dateChange$ = this.hourChange
            .merge(this.minuteChange)
            .merge(this.secondChange)
            .debounceTime(100)
            .subscribe(this.updateData, this.showError);
        this.updateFromData();
    };
    TimeComponent.prototype.showError = function (err) {
        console.error(err);
    };
    TimeComponent.prototype.updateFromData = function () {
        var time = moment(this.data, this.format);
        this.hour = leftPad(time.hour(), 2);
        this.minute = leftPad(time.minute(), 2);
        this.second = leftPad(time.second(), 2);
    };
    TimeComponent.prototype.updateData = function () {
        var time = moment();
        time.hour(+this.hour);
        time.minute(+this.minute);
        time.second(+this.second);
        this.data = time.format(this.format);
    };
    TimeComponent.prototype.ngOnDestroy = function () {
        this.dataChange$.unsubscribe();
        this.dateChange$.unsubscribe();
    };
    TimeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ay-time',
                    template: "\n    <ng-template #defaultHourTemplate=\"\" let-timepicker=\"timepicker\"><ay-dropdown class=\"hour\" [(data)]=\"timepicker.hour\" [items]=\"timepicker.hours\" icon=\"\"><ng-template #displayTemplate=\"\" let-display=\"display\" let-dropdown=\"dropdown\"><ng-template [ngTemplateOutlet]=\"timepicker.hourDropdownDisplayTemplate\" [ngOutletContext]=\"{ dropdown: dropdown, display: display, timepicker: timepicker }\"></ng-template></ng-template><ng-template #itemTemplate=\"\" let-disable=\"disable\" let-dropdown=\"dropdown\" let-index=\"index\" let-item=\"item\"><ng-template [ngTemplateOutlet]=\"timepicker.hourDropdownItemTemplate\" [ngOutletContext]=\"{ dropdown: dropdown, item: item, index: index, disable: disable, timepicker: timepicker }\"></ng-template></ng-template></ay-dropdown></ng-template><ng-template #defaultHourDropdownDisplayTemplate=\"\" let-display=\"display\" let-dropdown=\"dropdown\" let-timerpicker=\"timerpicker\"><div class=\"display\" [ngClass]=\"{ isOpen: dropdown.isOpen, isFocus: dropdown.isFocus }\"><div class=\"label\">{{ display }}</div></div></ng-template><ng-template #defaultHourDropdownItemTemplate=\"\" let-disable=\"disable\" let-dropdown=\"dropdown\" let-index=\"index\" let-item=\"item\" let-timepicker=\"timepicker\"><div class=\"item\" [ngClass]=\"{ hover: dropdown.hoverIndex == index, disable: disable}\">{{ item }}</div></ng-template><ng-template #defaultMinuteTemplate=\"\" let-timepicker=\"timepicker\"><ay-dropdown class=\"minute\" [(data)]=\"timepicker.minute\" [items]=\"timepicker.minutes\" icon=\"\"><ng-template #displayTemplate=\"\" let-display=\"display\" let-dropdown=\"dropdown\"><ng-template [ngTemplateOutlet]=\"timepicker.minuteDropdownDisplayTemplate\" [ngOutletContext]=\"{ dropdown: dropdown, display: display, timepicker: timepicker }\"></ng-template></ng-template><ng-template #itemTemplate=\"\" let-disable=\"disable\" let-dropdown=\"dropdown\" let-index=\"index\" let-item=\"item\"><ng-template [ngTemplateOutlet]=\"timepicker.minuteDropdownItemTemplate\" [ngOutletContext]=\"{ dropdown: dropdown, item: item, index: index, disable: disable, timepicker: timepicker }\"></ng-template></ng-template></ay-dropdown></ng-template><ng-template #defaultMinuteDropdownDisplayTemplate=\"\" let-display=\"display\" let-dropdown=\"dropdown\" let-timerpicker=\"timerpicker\"><div class=\"display\" [ngClass]=\"{ isOpen: dropdown.isOpen, isFocus: dropdown.isFocus }\"><div class=\"label\">{{ display }}</div></div></ng-template><ng-template #defaultMinuteDropdownItemTemplate=\"\" let-disable=\"disable\" let-dropdown=\"dropdown\" let-index=\"index\" let-item=\"item\" let-timepicker=\"timepicker\"><div class=\"item\" [ngClass]=\"{ hover: dropdown.hoverIndex == index, disable: disable}\">{{ item }}</div></ng-template><ng-template #defaultSecondTemplate=\"\" let-timepicker=\"timepicker\"><ay-dropdown class=\"second\" [(data)]=\"timepicker.second\" [items]=\"timepicker.seconds\" icon=\"\"><ng-template #displayTemplate=\"\" let-display=\"display\" let-dropdown=\"dropdown\"><ng-template [ngTemplateOutlet]=\"timepicker.secondDropdownDisplayTemplate\" [ngOutletContext]=\"{ dropdown: dropdown, display: display, timepicker: timepicker }\"></ng-template></ng-template><ng-template #itemTemplate=\"\" let-disable=\"disable\" let-dropdown=\"dropdown\" let-index=\"index\" let-item=\"item\"><ng-template [ngTemplateOutlet]=\"timepicker.secondDropdownItemTemplate\" [ngOutletContext]=\"{ dropdown: dropdown, item: item, index: index, disable: disable, timepicker: timepicker }\"></ng-template></ng-template></ay-dropdown></ng-template><ng-template #defaultSecondDropdownDisplayTemplate=\"\" let-display=\"display\" let-dropdown=\"dropdown\" let-timerpicker=\"timerpicker\"><div class=\"display\" [ngClass]=\"{ isOpen: dropdown.isOpen, isFocus: dropdown.isFocus }\"><div class=\"label\">{{ display }}</div></div></ng-template><ng-template #defaultSecondDropdownItemTemplate=\"\" let-disable=\"disable\" let-dropdown=\"dropdown\" let-index=\"index\" let-item=\"item\" let-timepicker=\"timepicker\"><div class=\"item\" [ngClass]=\"{ hover: dropdown.hoverIndex == index, disable: disable}\">{{ item }}</div></ng-template><ng-template #defaultSpliterTemplate=\"\"><span class=\"spliter\">:</span></ng-template><ng-template [ngTemplateOutlet]=\"hourTemplate\" [ngOutletContext]=\"{ timepicker: timepicker }\"></ng-template><ng-template [ngTemplateOutlet]=\"spliterTemplate\" [ngOutletContext]=\"{ timepicker: timepicker }\"></ng-template><ng-template [ngTemplateOutlet]=\"minuteTemplate\" [ngOutletContext]=\"{ timepicker: timepicker }\"></ng-template><ng-template [ngTemplateOutlet]=\"spliterTemplate\" [ngOutletContext]=\"{ timepicker: timepicker }\"></ng-template><ng-template [ngTemplateOutlet]=\"secondTemplate\" [ngOutletContext]=\"{ timepicker: timepicker }\"></ng-template>\n  ",
                    styles: ["\n    ay-time {\n      box-shadow: 0 1px 7px rgba(0, 0, 0, 0.05), 0 7px 17px rgba(0, 0, 0, 0.1);\n      font-size: .8em;\n      width: 12em;\n      display: inline-flex;\n      position: relative;\n      background-color: #FFF; }\n      ay-time ay-dropdown {\n        margin: 0;\n        width: 3em; }\n        ay-time ay-dropdown .display {\n          text-align: center;\n          height: 3em; }\n          ay-time ay-dropdown .display .label {\n            min-width: 0;\n            line-height: 2.5em; }\n        ay-time ay-dropdown .item {\n          text-align: center;\n          line-height: 2.5em; }\n      ay-time .spliter {\n        width: 1.5em;\n        text-align: center;\n        line-height: 3em; }\n  "],
                    encapsulation: ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    TimeComponent.ctorParameters = function () { return []; };
    TimeComponent.propDecorators = {
        'format': [{ type: Input },],
        'dataChange': [{ type: Output },],
        'data': [{ type: Input },],
        'hourChange': [{ type: Output },],
        'minuteChange': [{ type: Output },],
        'secondChange': [{ type: Output },],
        'defaultHourTemplate': [{ type: ViewChild, args: ["defaultHourTemplate",] },],
        'hourTemplate': [{ type: ContentChild, args: ["hourTemplate",] },],
        'defaultHourDropdownDisplayTemplate': [{ type: ViewChild, args: ["defaultHourDropdownDisplayTemplate",] },],
        'hourDropdownDisplayTemplate': [{ type: ContentChild, args: ["hourDropdownDisplayTemplate",] },],
        'defaultHourDropdownItemTemplate': [{ type: ViewChild, args: ["defaultHourDropdownItemTemplate",] },],
        'hourDropdownItemTemplate': [{ type: ContentChild, args: ["hourDropdownItemTemplate",] },],
        'defaultMinuteTemplate': [{ type: ViewChild, args: ["defaultMinuteTemplate",] },],
        'minuteTemplate': [{ type: ContentChild, args: ["minuteTemplate",] },],
        'defaultMinuteDropdownDisplayTemplate': [{ type: ViewChild, args: ["defaultMinuteDropdownDisplayTemplate",] },],
        'minuteDropdownDisplayTemplate': [{ type: ContentChild, args: ["minuteDropdownDisplayTemplate",] },],
        'defaultMinuteDropdownItemTemplate': [{ type: ViewChild, args: ["defaultMinuteDropdownItemTemplate",] },],
        'minuteDropdownItemTemplate': [{ type: ContentChild, args: ["minuteDropdownItemTemplate",] },],
        'defaultSecondTemplate': [{ type: ViewChild, args: ["defaultSecondTemplate",] },],
        'secondTemplate': [{ type: ContentChild, args: ["secondTemplate",] },],
        'defaultSecondDropdownDisplayTemplate': [{ type: ViewChild, args: ["defaultSecondDropdownDisplayTemplate",] },],
        'secondDropdownDisplayTemplate': [{ type: ContentChild, args: ["secondDropdownDisplayTemplate",] },],
        'defaultSecondDropdownItemTemplate': [{ type: ViewChild, args: ["defaultSecondDropdownItemTemplate",] },],
        'secondDropdownItemTemplate': [{ type: ContentChild, args: ["secondDropdownItemTemplate",] },],
        'defaultSpliterTemplate': [{ type: ViewChild, args: ["defaultSpliterTemplate",] },],
        'spliterTemplate': [{ type: ContentChild, args: ["spliterTemplate",] },],
    };
    __decorate([
        bind
    ], TimeComponent.prototype, "updateFromData", null);
    __decorate([
        bind
    ], TimeComponent.prototype, "updateData", null);
    return TimeComponent;
}());
export { TimeComponent };
//# sourceMappingURL=time.component.js.map