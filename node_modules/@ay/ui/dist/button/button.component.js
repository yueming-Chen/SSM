var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Component, Output, EventEmitter, Input, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';
import { bind } from "@ay/util/dist";
import { Color } from "../util/color";
var ButtonComponent = (function () {
    //- 事件
    function ButtonComponent() {
        this.activeChange = new EventEmitter();
        /** color */
        this._color = "#308BC8";
        this.colorChange = new EventEmitter();
        this.deepChange = new EventEmitter();
        this.deeperChange = new EventEmitter();
        this.disableChange = new EventEmitter();
        this.invertChange = new EventEmitter();
        this.hoverChange = new EventEmitter();
        this.clickChange = new EventEmitter();
    }
    Object.defineProperty(ButtonComponent.prototype, "active", {
        get: function () {
            return this._active;
        },
        set: function (active) {
            if (this._active === active)
                return;
            this._active = active;
            this.activeChange.emit(this._active);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "color", {
        get: function () {
            return this._color;
        },
        set: function (color) {
            if (this._color === color)
                return;
            this._color = color;
            this.colorChange.emit(this._color);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "deep", {
        get: function () {
            return this._deep;
        },
        set: function (deep) {
            if (this._deep === deep)
                return;
            this._deep = deep;
            this.deepChange.emit(this._deep);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "deeper", {
        get: function () {
            return this._deeper;
        },
        set: function (deeper) {
            if (this._deeper === deeper)
                return;
            this._deeper = deeper;
            this.deeperChange.emit(this._deeper);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "disable", {
        get: function () {
            return this._disable;
        },
        set: function (disable) {
            if (this._disable === disable)
                return;
            this._disable = disable;
            this.disableChange.emit(this._disable);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "invert", {
        get: function () {
            return this._invert;
        },
        set: function (invert) {
            if (this._invert === invert)
                return;
            this._invert = invert;
            this.invertChange.emit(this._invert);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "hover", {
        get: function () {
            return this._hover;
        },
        set: function (hover) {
            if (this._hover === hover)
                return;
            this._hover = hover;
            this.hoverChange.emit(this._hover);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "click", {
        get: function () {
            return this._click;
        },
        set: function (click) {
            if (this._click === click)
                return;
            this._click = click;
            this.clickChange.emit(this._click);
        },
        enumerable: true,
        configurable: true
    });
    ButtonComponent.prototype.ngAfterViewInit = function () {
    };
    ButtonComponent.prototype.ngOnDestroy = function () {
    };
    ButtonComponent.prototype.ngAfterContentInit = function () {
        this.colorChange
            .merge(this.deepChange)
            .merge(this.deeperChange)
            .subscribe(this.recalcColor, this.onError);
        this.disableChange
            .merge(this.hoverChange)
            .merge(this.invertChange)
            .merge(this.activeChange)
            .subscribe(this.recalcStatus, this.onError);
        this.recalcColor();
        this.recalcStatus();
    };
    ButtonComponent.prototype.recalcColor = function () {
        var _a = Color.HEXtoRGB(this.color), red = _a.red, green = _a.green, blue = _a.blue;
        var _b = Color.HEXtoHSB(this.color), hue = _b.hue, saturation = _b.saturation, brightness = _b.brightness;
        var max = Math.max(saturation, brightness);
        var min = Math.min(saturation, brightness);
        var isGray = Math.max(red, green, blue) - Math.min(red, green, blue) < 10;
        if (isGray) {
            this.normalColor = this.color;
            if (red > 127) {
                this.deepColor = this.deep || Color.adjustColorLevel(this.color, 2);
                this.deeperColor = this.deeper || Color.adjustColorLevel(this.color, 4);
                this.invertColor = Color.adjustColorLevel(this.color, 6);
            }
            else {
                this.deepColor = this.deep || Color.adjustColorLevel(this.color, -2);
                this.deeperColor = this.deeper || Color.adjustColorLevel(this.color, -4);
                this.invertColor = Color.adjustColorLevel(this.color, -10);
            }
        }
        else if (Color.isLight(red, green, blue)) {
            this.normalColor = this.color;
            this.deepColor = this.deep || Color.adjustColorLevel(this.color, -2);
            this.deeperColor = this.deeper || Color.adjustColorLevel(this.color, 2);
            this.invertColor = Color.adjustColorLevel(this.color, -8);
        }
        else {
            this.normalColor = this.color;
            this.deepColor = this.deep || Color.adjustColorLevel(this.color, -2);
            this.deeperColor = this.deeper || Color.adjustColorLevel(this.color, 2);
            this.invertColor = Color.adjustColorLevel(this.color, 8);
        }
        this.recalcStatus();
    };
    ButtonComponent.prototype.recalcStatus = function () {
        if (this.invert) {
            if (this.disable) {
                this.backgroundColor = "transparent";
                this.borderColor = "#CCCCCC";
                this.fontColor = "#333333";
            }
            else if (this.active) {
                this.backgroundColor = this.deepColor;
                this.borderColor = "transparent";
                this.fontColor = this.invertColor;
            }
            else if (this.hover) {
                this.backgroundColor = this.normalColor;
                this.borderColor = "transparent";
                this.fontColor = this.invertColor;
            }
            else {
                this.backgroundColor = "#FFF";
                this.borderColor = this.normalColor;
                this.fontColor = this.normalColor;
            }
        }
        else {
            if (this.disable) {
                this.backgroundColor = "#CCCCCC";
                this.borderColor = "transparent";
                this.fontColor = "#333333";
            }
            else if (this.active) {
                this.backgroundColor = this.deeperColor;
                this.borderColor = "transparent";
                this.fontColor = this.invertColor;
            }
            else if (this.hover) {
                this.backgroundColor = this.deepColor;
                this.borderColor = "transparent";
                this.fontColor = this.invertColor;
            }
            else {
                this.backgroundColor = this.color;
                this.borderColor = "transparent";
                this.fontColor = this.invertColor;
            }
        }
    };
    ButtonComponent.prototype.onError = function (err) {
        console.error(err);
    };
    ButtonComponent.prototype.onClick = function ($event) {
        if (!this.disable) {
            this.clickChange.emit($event);
        }
    };
    ButtonComponent.prototype.onMouseEnter = function () {
        this.hover = true;
    };
    ButtonComponent.prototype.onMouseLeave = function () {
        this.hover = false;
    };
    ButtonComponent.prototype.onMouseDown = function () {
        this.active = true;
    };
    ButtonComponent.prototype.onMouseUp = function () {
        this.active = false;
    };
    ButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ay-button',
                    template: "\n    <button [ngClass]=\"{ disable: disable, hover: hover, active: active, invert: invert }\" [style.background-color]=\"backgroundColor\" [style.border-color]=\"borderColor\" [style.color]=\"fontColor\" (click)=\"onClick($event)\" (mousedown)=\"onMouseDown($event)\" (mouseenter)=\"onMouseEnter()\" (mouseleave)=\"onMouseLeave()\" (mouseup)=\"onMouseUp($event)\"><ng-content></ng-content></button>\n  ",
                    styles: ["\n    ay-button {\n      margin: 8px 12px;\n      font-size: 1em;\n      line-height: 1em;\n      vertical-align: top;\n      display: inline-block; }\n      ay-button .fa {\n        margin-right: .5em; }\n      ay-button button {\n        line-height: 1.5em;\n        width: 100%;\n        display: inline-block;\n        border-radius: 2em;\n        padding: .25em 1.5em;\n        border: 1px solid transparent;\n        cursor: pointer;\n        transition: all .2s linear; }\n        ay-button button:focus, ay-button button:hover {\n          outline: none;\n          box-shadow: 0 1px 7px rgba(0, 0, 0, 0.05), 0 7px 17px rgba(0, 0, 0, 0.1); }\n        ay-button button.active {\n          box-shadow: 0 1px 5px rgba(0, 0, 0, 0.1), 0 5px 13px rgba(0, 0, 0, 0.2); }\n        ay-button button.disable {\n          cursor: not-allowed; }\n          ay-button button.disable:focus, ay-button button.disable:hover {\n            outline: none;\n            box-shadow: none; }\n\n    ay-button.square button {\n      border-radius: 3px; }\n\n    .button-group {\n      margin: 8px 12px; }\n      .button-group ay-button {\n        margin: 0; }\n        .button-group ay-button button {\n          border-radius: 0;\n          padding-left: 1em;\n          padding-right: 1em;\n          border-right-width: 0 !important; }\n      .button-group ay-button:first-child button {\n        border-radius: 2em 0 0 2em;\n        padding-left: 1.5em; }\n      .button-group ay-button:last-child button {\n        border-radius: 0 2em 2em 0;\n        padding-right: 1.5em;\n        border-right-width: 1px !important; }\n      .button-group.square ay-button:first-child button {\n        border-radius: 3px 0 0 3px;\n        padding-left: 1em; }\n      .button-group.square ay-button:last-child button {\n        border-radius: 0 3px 3px 0;\n        padding-right: 1em; }\n  "],
                    encapsulation: ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    ButtonComponent.ctorParameters = function () { return []; };
    ButtonComponent.propDecorators = {
        'activeChange': [{ type: Output },],
        'active': [{ type: Input },],
        'color': [{ type: Input },],
        'deepChange': [{ type: Output },],
        'deep': [{ type: Input },],
        'deeperChange': [{ type: Output },],
        'deeper': [{ type: Input },],
        'disable': [{ type: Input },],
        'invertChange': [{ type: Output },],
        'invert': [{ type: Input },],
        'hoverChange': [{ type: Output },],
        'hover': [{ type: Input },],
        'clickChange': [{ type: Output },],
        'click': [{ type: Input },],
        'content': [{ type: ViewChild, args: [TemplateRef,] },],
    };
    __decorate([
        bind
    ], ButtonComponent.prototype, "recalcColor", null);
    __decorate([
        bind
    ], ButtonComponent.prototype, "recalcStatus", null);
    __decorate([
        bind
    ], ButtonComponent.prototype, "onError", null);
    __decorate([
        bind
    ], ButtonComponent.prototype, "onClick", null);
    __decorate([
        bind
    ], ButtonComponent.prototype, "onMouseEnter", null);
    __decorate([
        bind
    ], ButtonComponent.prototype, "onMouseLeave", null);
    __decorate([
        bind
    ], ButtonComponent.prototype, "onMouseDown", null);
    __decorate([
        bind
    ], ButtonComponent.prototype, "onMouseUp", null);
    return ButtonComponent;
}());
export { ButtonComponent };
//# sourceMappingURL=button.component.js.map