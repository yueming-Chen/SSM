{"version":3,"sources":["../../tmp/alert/alert.service.ts"],"names":[],"mappings":"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","file":"alert.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport * as sweetalert2 from \"sweetalert2\";\n\nexport interface AlertInputOption {\n  [key: string]: string;\n}\n\nexport interface AlertOption {\n  /**  標題 */\n  title?: string;\n  /**  A description for the modal. It can either be added to the object under the key \"text\" or passed as the second parameter of the function. */\n  text?: string;\n  /**   null  A HTML description for the modal. If \"text\" and \"html\" parameters are provided in the same time, \"text\" will be used. */\n  html?: string;\n  /**   null  The type of the modal. SweetAlert2 comes with 5 built-in types which will show a corresponding icon animation: warning, error, success, info and question. It can either be put in the array under the key \"type\" or passed as the third parameter of the function. */\n  type?: \"warning\" | \"error\" | \"success\" | \"info\" | \"question\";\n  /**  null  Input field type, can be text, email, password, number, tel, range, textarea, select, radio, checkbox and file. */\n  input?: \"text\" | \"email\" | \"password\" | \"number\" | \"tel\" | \"range\" | \"textarea\" | \"select\" | \"radio\" | \"checkbox\" | \"file\";\n  /**  \"500px\" Modal window width, including paddings (box-sizing: border-box). Can be in px or %. */\n  width?: string;\n  /**  20  Modal window padding. */\n  padding?: number;\n  /**   \"#fff\"  Modal window background (CSS background property). */\n  background?: string;\n  /**  null  A custom CSS class for the modal. */\n  customClass?: string;\n  /**  null  Auto close timer of the modal. Set in ms (milliseconds). */\n  timer?: number;\n  /**  true  If set to false, modal CSS animation will be disabled. */\n  animation?: boolean;\n  /**  true  If set to false, the user can\"t dismiss the modal by clicking outside it. */\n  allowOutsideClick?: boolean;\n  /**   true  If set to false, the user can\"t dismiss the modal by pressing the Escape key. */\n  allowEscapeKey?: boolean;\n  /**  true  If set to false, a \"Confirm\"-button will not be shown. It can be useful when you\"re using custom HTML description. */\n  showConfirmButton?: boolean;\n  /**   false If set to true, a \"Cancel\"-button will be shown, which the user can click on to dismiss the modal. */\n  showCancelButton?: boolean;\n  /**  \"OK\"  Use this to change the text on the \"Confirm\"-button. */\n  confirmButtonText?: string;\n  /**   \"Cancel\"  Use this to change the text on the \"Cancel\"-button. */\n  cancelButtonText?: string;\n  /**   \"#3085d6\" Use this to change the background color of the \"Confirm\"-button (must be a HEX value). */\n  confirmButtonColor?: string;\n  /**  \"#aaa\"  Use this to change the background color of the \"Cancel\"-button (must be a HEX value). */\n  cancelButtonColor?: string;\n  /**   null  A custom CSS class for the \"Confirm\"-button. */\n  confirmButtonClass?: string;\n  /**  null  A custom CSS class for the \"Cancel\"-button. */\n  cancelButtonClass?: string;\n  /**   true  Apply default swal2 styling to buttons. If you want to use your own classes (e.g. Bootstrap classes) set this parameter to false. */\n  buttonsStyling?: boolean;\n  /**   false Set to true if you want to invert default buttons positions. */\n  reverseButtons?: boolean;\n  /**  false Set to true if you want to focus the \"Cancel\"-button by default. */\n  focusCancel?: boolean;\n  /**  false Set to true to show close button in top right corner of the modal. */\n  showCloseButton?: boolean;\n  /**  false Set to true to disable buttons and show that something is loading. Useful for AJAX requests. */\n  showLoaderOnConfirm?: boolean;\n  /**   null  Function to execute before confirm, should return Promise, see usage example. */\n  preConfirm?: Function;\n  /**   null  Add a customized icon for the modal. Should contain a string with the path or URL to the image. */\n  imageUrl?: string;\n  /**   null  If imageUrl is set, you can specify imageWidth to describes image width in px. */\n  imageWidth?: string;\n  /**  null  Custom image height in px. */\n  imageHeight?: string;\n  /**   null  A custom CSS class for the customized icon. */\n  imageClass?: string;\n  /**   \"\"  Input field placeholder. */\n  inputPlaceholder?: string;\n  /**   \"\"  Input field initial value. */\n  inputValue?: string | number;\n  /**   {} or Promise If input parameter is set to \"select\" or \"radio\", you can provide options. Object keys will represent options values, object values will represent options text values. */\n  inputOptions?: AlertInputOption | Promise<AlertOption>;\n  /**  true  Automatically remove whitespaces from both ends of a result string. Set this parameter to false to disable auto-trimming. */\n  inputAutoTrim?: boolean;\n  /**   null  Validator for input field, should return Promise, see usage example. */\n  inputValidator?: Promise<void>;\n  /**   null  A custom CSS class for the input field. */\n  inputClass?: string;\n  /**  []  Progress steps, useful for modal queues, see usage example. */\n  progressSteps?: string[];\n  /**  null  Current active progress step. The default is swal.getQueueStep() */\n  currentProgressStep?: any;\n  /**  \"40px\"  Distance between progress steps. */\n  progressStepsDistance?: string;\n  /** Function to run when modal opens, provides modal DOM element as the first argument. */\n  onOpen?: (dom: HTMLElement) => void;\n  /**  null  Function to run when modal closes, provides modal DOM element as the first argument. */\n  onClose?: (dom: HTMLElement) => void;\n\n  // 該步驟的icon\n  step?: string;\n}\n\n\nexport class AlertService {\n  sweetalert2: any;\n\n  constructor() {\n    this.sweetalert2 = sweetalert2;\n  }\n\n  /**\n   * 跳出提示框\n   * @param title 標題\n   * @param type 類型\n   */\n  public prompt(title: string, type: \"text\" | \"email\" | \"password\" | \"number\" | \"tel\" | \"range\" | \"textarea\" | \"select\" | \"radio\" | \"checkbox\" | \"file\"): Promise<void>;\n  /**\n   * 跳出提示框\n   * @param option 參數\n   */\n  public prompt(option: AlertOption): Promise<void>;\n  public prompt(option: string | AlertOption, type?: \"text\" | \"email\" | \"password\" | \"number\" | \"tel\" | \"range\" | \"textarea\" | \"select\" | \"radio\" | \"checkbox\" | \"file\"): Promise<void> {\n    return this.custom(option, {\n      showCancelButton: true,\n      type: \"info\",\n      input: type\n    });\n  }\n\n  public confirm(title: string): Promise<void>;\n  public confirm(option: AlertOption): Promise<void>;\n  public confirm(option: string | AlertOption): Promise<void> {\n    return this.custom(option, {\n      showCancelButton: true,\n      type: \"warning\"\n    });\n  }\n\n  public alert(title: string): Promise<void>;\n  public alert(option: AlertOption): Promise<void>;\n  public alert(option: string | AlertOption): Promise<void> {\n    return this.custom(option, {\n      type: \"info\"\n    });\n  }\n\n  public question(title: string): Promise<void>;\n  public question(option: AlertOption): Promise<void>;\n  public question(option: string | AlertOption): Promise<void> {\n    return this.custom(option, { type: \"question\", animation: true });\n  }\n\n  public success(title: string): Promise<void>;\n  public success(option: AlertOption): Promise<void>;\n  public success(option: string | AlertOption): Promise<void> {\n    return this.custom(option, { type: \"success\" });\n  }\n\n  public error(title: string): Promise<void>;\n  public error(option: AlertOption): Promise<void>;\n  public error(option: string | AlertOption): Promise<void> {\n    return this.custom(option, { type: \"error\" });\n  }\n\n  public warning(title: string): Promise<void>;\n  public warning(option: AlertOption): Promise<void>;\n  public warning(option: string | AlertOption): Promise<void> {\n    return this.custom(option, { type: \"warning\" });\n  }\n\n  public info(title: string): Promise<void>;\n  public info(option: AlertOption): Promise<void>;\n  public info(option: string | AlertOption): Promise<void> {\n    return this.custom(option, { type: \"info\" });\n  }\n\n  public custom(option: AlertOption);\n  public custom(text: string, option: AlertOption);\n  public custom(optionOrText: string | AlertOption, option: AlertOption);\n  public custom(optionOrText: string | AlertOption, option: AlertOption = {}): Promise<void> {\n    if (typeof (optionOrText) === \"string\") {\n      optionOrText = { text: optionOrText };\n    }\n\n    var defaultOption: AlertOption = {\n      confirmButtonText: \"確認\",\n      cancelButtonText: \"取消\",\n      background: \"#f2f2f2\"\n    }\n\n    option = Object.assign({}, defaultOption, optionOrText, option);\n    return this.sweetalert2(option);\n  }\n\n  public queue(...options: string[]);\n  public queue(...options: AlertOption[]);\n  public queue(...options: (string | AlertOption)[]) {\n    let defalutOption = {\n      input: 'text',\n      confirmButtonText: '下一步',\n      cancelButtonText: '取消',\n      showCancelButton: true,\n      background: \"#f2f2f2\",\n      animation: true\n    };\n\n\n    let progressSteps = [];\n    options = options.map((option, index) => {\n      if (typeof option === \"string\") {\n        option = { text: option };\n      }\n      option = Object.assign({}, defalutOption, option);\n      option.step = option.step || (index + 1).toString();\n      if (option.step.substr(0, 3) == \"fa-\") option.step = \"<span class='fa \" + option.step + \"'></span>\";\n      progressSteps.push(option.step);\n      option.progressSteps = progressSteps;\n      return option;\n    })\n    return this.sweetalert2.queue(options);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}