export interface AlertInputOption {
    [key: string]: string;
}
export interface AlertOption {
    /**  標題 */
    title?: string;
    /**  A description for the modal. It can either be added to the object under the key "text" or passed as the second parameter of the function. */
    text?: string;
    /**   null  A HTML description for the modal. If "text" and "html" parameters are provided in the same time, "text" will be used. */
    html?: string;
    /**   null  The type of the modal. SweetAlert2 comes with 5 built-in types which will show a corresponding icon animation: warning, error, success, info and question. It can either be put in the array under the key "type" or passed as the third parameter of the function. */
    type?: "warning" | "error" | "success" | "info" | "question";
    /**  null  Input field type, can be text, email, password, number, tel, range, textarea, select, radio, checkbox and file. */
    input?: "text" | "email" | "password" | "number" | "tel" | "range" | "textarea" | "select" | "radio" | "checkbox" | "file";
    /**  "500px" Modal window width, including paddings (box-sizing: border-box). Can be in px or %. */
    width?: string;
    /**  20  Modal window padding. */
    padding?: number;
    /**   "#fff"  Modal window background (CSS background property). */
    background?: string;
    /**  null  A custom CSS class for the modal. */
    customClass?: string;
    /**  null  Auto close timer of the modal. Set in ms (milliseconds). */
    timer?: number;
    /**  true  If set to false, modal CSS animation will be disabled. */
    animation?: boolean;
    /**  true  If set to false, the user can"t dismiss the modal by clicking outside it. */
    allowOutsideClick?: boolean;
    /**   true  If set to false, the user can"t dismiss the modal by pressing the Escape key. */
    allowEscapeKey?: boolean;
    /**  true  If set to false, a "Confirm"-button will not be shown. It can be useful when you"re using custom HTML description. */
    showConfirmButton?: boolean;
    /**   false If set to true, a "Cancel"-button will be shown, which the user can click on to dismiss the modal. */
    showCancelButton?: boolean;
    /**  "OK"  Use this to change the text on the "Confirm"-button. */
    confirmButtonText?: string;
    /**   "Cancel"  Use this to change the text on the "Cancel"-button. */
    cancelButtonText?: string;
    /**   "#3085d6" Use this to change the background color of the "Confirm"-button (must be a HEX value). */
    confirmButtonColor?: string;
    /**  "#aaa"  Use this to change the background color of the "Cancel"-button (must be a HEX value). */
    cancelButtonColor?: string;
    /**   null  A custom CSS class for the "Confirm"-button. */
    confirmButtonClass?: string;
    /**  null  A custom CSS class for the "Cancel"-button. */
    cancelButtonClass?: string;
    /**   true  Apply default swal2 styling to buttons. If you want to use your own classes (e.g. Bootstrap classes) set this parameter to false. */
    buttonsStyling?: boolean;
    /**   false Set to true if you want to invert default buttons positions. */
    reverseButtons?: boolean;
    /**  false Set to true if you want to focus the "Cancel"-button by default. */
    focusCancel?: boolean;
    /**  false Set to true to show close button in top right corner of the modal. */
    showCloseButton?: boolean;
    /**  false Set to true to disable buttons and show that something is loading. Useful for AJAX requests. */
    showLoaderOnConfirm?: boolean;
    /**   null  Function to execute before confirm, should return Promise, see usage example. */
    preConfirm?: Function;
    /**   null  Add a customized icon for the modal. Should contain a string with the path or URL to the image. */
    imageUrl?: string;
    /**   null  If imageUrl is set, you can specify imageWidth to describes image width in px. */
    imageWidth?: string;
    /**  null  Custom image height in px. */
    imageHeight?: string;
    /**   null  A custom CSS class for the customized icon. */
    imageClass?: string;
    /**   ""  Input field placeholder. */
    inputPlaceholder?: string;
    /**   ""  Input field initial value. */
    inputValue?: string | number;
    /**   {} or Promise If input parameter is set to "select" or "radio", you can provide options. Object keys will represent options values, object values will represent options text values. */
    inputOptions?: AlertInputOption | Promise<AlertOption>;
    /**  true  Automatically remove whitespaces from both ends of a result string. Set this parameter to false to disable auto-trimming. */
    inputAutoTrim?: boolean;
    /**   null  Validator for input field, should return Promise, see usage example. */
    inputValidator?: Promise<void>;
    /**   null  A custom CSS class for the input field. */
    inputClass?: string;
    /**  []  Progress steps, useful for modal queues, see usage example. */
    progressSteps?: string[];
    /**  null  Current active progress step. The default is swal.getQueueStep() */
    currentProgressStep?: any;
    /**  "40px"  Distance between progress steps. */
    progressStepsDistance?: string;
    /** Function to run when modal opens, provides modal DOM element as the first argument. */
    onOpen?: (dom: HTMLElement) => void;
    /**  null  Function to run when modal closes, provides modal DOM element as the first argument. */
    onClose?: (dom: HTMLElement) => void;
    step?: string;
}
export declare class AlertService {
    sweetalert2: any;
    constructor();
    /**
     * 跳出提示框
     * @param title 標題
     * @param type 類型
     */
    prompt(title: string, type: "text" | "email" | "password" | "number" | "tel" | "range" | "textarea" | "select" | "radio" | "checkbox" | "file"): Promise<void>;
    /**
     * 跳出提示框
     * @param option 參數
     */
    prompt(option: AlertOption): Promise<void>;
    confirm(title: string): Promise<void>;
    confirm(option: AlertOption): Promise<void>;
    alert(title: string): Promise<void>;
    alert(option: AlertOption): Promise<void>;
    question(title: string): Promise<void>;
    question(option: AlertOption): Promise<void>;
    success(title: string): Promise<void>;
    success(option: AlertOption): Promise<void>;
    error(title: string): Promise<void>;
    error(option: AlertOption): Promise<void>;
    warning(title: string): Promise<void>;
    warning(option: AlertOption): Promise<void>;
    info(title: string): Promise<void>;
    info(option: AlertOption): Promise<void>;
    custom(option: AlertOption): any;
    custom(text: string, option: AlertOption): any;
    custom(optionOrText: string | AlertOption, option: AlertOption): any;
    queue(...options: string[]): any;
    queue(...options: AlertOption[]): any;
}
