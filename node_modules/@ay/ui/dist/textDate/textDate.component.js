var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Component, Output, EventEmitter, Input, ElementRef, ViewEncapsulation, Renderer } from '@angular/core';
import { bind } from "@ay/util";
var TextDateComponent = (function () {
    function TextDateComponent(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.borderColor = "white";
        this.blurDate = new EventEmitter();
    }
    TextDateComponent.prototype.ngAfterContentInit = function () {
    };
    TextDateComponent.prototype.yearUp = function (event) {
        if (this.year >= 1000) {
            this.renderer.invokeElementMethod(this.elementRef.nativeElement.querySelector("#month input"), 'focus', []);
        }
    };
    TextDateComponent.prototype.monthUp = function (event) {
        if (this.month >= 2) {
            this.renderer.invokeElementMethod(this.elementRef.nativeElement.querySelector("#day input"), 'focus', []);
        }
    };
    TextDateComponent.prototype.dayUp = function (event) {
        if (this.day >= 4) {
            this.renderer.invokeElementMethod(this.elementRef.nativeElement, 'blur', []);
        }
    };
    TextDateComponent.prototype.finish = function () {
        var valid = this.checkError();
        if (valid) {
            var date = { year: this.year, month: this.month, day: this.day };
            this.blurDate.emit(date);
        }
    };
    TextDateComponent.prototype.checkError = function () {
        if (this.year && this.month && this.day) {
            this.error = (this.checkYear() && this.checkMonth() && this.checkDay()) ? '' : '輸入日期錯誤';
            return (this.error) ? false : true;
        }
        this.error = '';
        return false;
    };
    TextDateComponent.prototype.checkYear = function () {
        var nowtime = new Date();
        return !(this.year > nowtime.getFullYear() || this.year < 1900);
    };
    TextDateComponent.prototype.checkMonth = function () {
        return !(this.month > 12 || this.month <= 0);
    };
    TextDateComponent.prototype.checkDay = function () {
        var FebDay = this.leapyear() ? 28 : 29;
        var monthDayList = [31, FebDay, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        return !((this.day > 31 || this.day <= 0) || (this.day > monthDayList[this.month - 1]));
    };
    TextDateComponent.prototype.leapyear = function () {
        var year = this.year;
        return ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);
    };
    TextDateComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ay-textDate',
                    template: "\n    <div class=\"container\" [style.border-color]=\"borderColor\"><ay-input class=\"input\" id=\"year\" [(data)]=\"year\" type=\"tel\" placeholder=\"\u897F\u5143\u5E74\" [targetBlur]=\"finish\" (targetKeyUp)=\"yearUp($event)\"></ay-input><ay-input class=\"input\" id=\"month\" [(data)]=\"month\" type=\"tel\" placeholder=\"\u6708\" [targetBlur]=\"finish\" (targetKeyUp)=\"monthUp($event)\"></ay-input><ay-input class=\"input\" id=\"day\" [(data)]=\"day\" type=\"tel\" placeholder=\"\u65E5\" [targetBlur]=\"finish\" (targetKeyUp)=\"dayUp($event)\"></ay-input></div><div class=\"error-message\" *ngIf=\"error\">{{ error }}</div>\n  ",
                    styles: ["\n    ay-textDate .container {\n      display: flex;\n      flex-direction: row;\n      border: 1px solid white; }\n      ay-textDate .container .input {\n        background: none; }\n\n    .error-message {\n      margin: 2px 0px;\n      color: red; }\n  "],
                    encapsulation: ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    TextDateComponent.ctorParameters = function () { return [
        { type: Renderer, },
        { type: ElementRef, },
    ]; };
    TextDateComponent.propDecorators = {
        'borderColor': [{ type: Input },],
        'blurDate': [{ type: Output },],
    };
    __decorate([
        bind
    ], TextDateComponent.prototype, "finish", null);
    __decorate([
        bind
    ], TextDateComponent.prototype, "checkError", null);
    __decorate([
        bind
    ], TextDateComponent.prototype, "checkYear", null);
    __decorate([
        bind
    ], TextDateComponent.prototype, "checkMonth", null);
    __decorate([
        bind
    ], TextDateComponent.prototype, "checkDay", null);
    __decorate([
        bind
    ], TextDateComponent.prototype, "leapyear", null);
    return TextDateComponent;
}());
export { TextDateComponent };
//# sourceMappingURL=textDate.component.js.map