import { ElementRef, EventEmitter, AfterViewInit, OnDestroy } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { Observer, ConnectableObservable, Subscription } from "rxjs";
export declare class ColorComponent implements AfterViewInit, OnDestroy {
    sanitizer: DomSanitizer;
    private _value;
    pickerR: ElementRef;
    pickerG: ElementRef;
    pickerB: ElementRef;
    pickerH: ElementRef;
    pickerS: ElementRef;
    pickerB2: ElementRef;
    /** mode */
    private _mode;
    modeChange: EventEmitter<string>;
    mode: string;
    /** data */
    private _data;
    dataChange: EventEmitter<string>;
    data: string;
    hsb: HSB;
    rgb: RGB;
    isAbsorb: boolean;
    startAbsorb($event: MouseEvent): void;
    endAbsorb(): void;
    absorb($event: MouseEvent): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    hsbSubscription: Subscription;
    rgbSubscription: Subscription;
    constructor(sanitizer: DomSanitizer);
    ngAfterViewChecked(): void;
}
export declare class HSB {
    observer: Observer<this>;
    observable: ConnectableObservable<this>;
    bindingFlag: boolean;
    hsl: string;
    hSlider: string;
    sSlider: string;
    bSlider: string;
    sb: string;
    hb: string;
    hs: string;
    private _h;
    h: number;
    private _s;
    s: number;
    private _b;
    b: number;
    updateSlider(): void;
    static toHSL(h: any, s: any, b: any, a?: number): string;
    static toRGB(h: any, s: any, b: any): {
        r: number;
        g: number;
        b: number;
    };
    toRGB(): {
        r: number;
        g: number;
        b: number;
    };
    toHSL(): string;
    constructor();
}
export declare class RGB {
    observer: Observer<this>;
    observable: ConnectableObservable<this>;
    bindingFlag: boolean;
    rgb: string;
    rSlider: string;
    gSlider: string;
    bSlider: string;
    gb: string;
    rb: string;
    rg: string;
    hexError: boolean;
    private _r;
    r: number;
    private _g;
    g: number;
    private _b;
    b: number;
    updateSlider(): void;
    constructor();
    static toHSB(r: any, g: any, b: any): {
        h: number;
        s: number;
        b: number;
    };
    toHSB(): {
        h: number;
        s: number;
        b: number;
    };
    private _hex;
    hexChange: EventEmitter<string>;
    hex: string;
    static leftPad(str: any, len: any, ch?: string): any;
    static toHex(r: any, g: any, b: any): string;
    toHex(): string;
}
