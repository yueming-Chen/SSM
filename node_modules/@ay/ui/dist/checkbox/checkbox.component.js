var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Component, Output, Input, EventEmitter, ContentChild, ViewChild, ViewChildren, Renderer, ApplicationRef, ViewEncapsulation } from '@angular/core';
import { toObserver, bind, defaults } from "@ay/util";
import * as _ from "lodash";
var CheckboxComponent = (function () {
    //- 事件
    function CheckboxComponent(renderer, appRef) {
        this.renderer = renderer;
        this.appRef = appRef;
        //- 公有變數
        this.queriedItems = [];
        this.isSelectable = [];
        this.dataChange = new EventEmitter();
        this.itemsChange = new EventEmitter();
        this.isCheckedChange = new EventEmitter();
        /** isMulti */
        this._isMulti = 1;
        this.isMultiChange = new EventEmitter();
        this.isLoadingChange = new EventEmitter();
        /** selectableCondition */
        this._selectableCondition = function (item) { return true; };
        this.selectableConditionChange = new EventEmitter();
        /** isSame */
        this._isSame = function (a, b) { return a === b; };
        this.isSameChange = new EventEmitter();
        //- 元素
        this.itemElements = null;
        //- 樣板
        this.defaultItemTemplate = null;
        this.itemTemplate = null;
        this.defaultCheckboxTemplate = null;
        this.checkboxTemplate = null;
    }
    Object.defineProperty(CheckboxComponent.prototype, "data", {
        get: function () {
            return this._data;
        },
        set: function (data) {
            if (this._data === data)
                return;
            this._data = data;
            this.dataChange.emit(this._data);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxComponent.prototype, "items", {
        get: function () {
            return this._items;
        },
        set: function (menu) {
            if (this._items === menu)
                return;
            this._items = menu;
            this.itemsChange.emit(this._items);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxComponent.prototype, "isChecked", {
        get: function () {
            return this._isChecked;
        },
        set: function (isChecked) {
            if (this._isChecked === isChecked)
                return;
            this._isChecked = isChecked;
            this.isCheckedChange.emit(this._isChecked);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxComponent.prototype, "multi", {
        get: function () {
            return this._isMulti;
        },
        set: function (isMulti) {
            if (this._isMulti === isMulti)
                return;
            this._isMulti = isMulti;
            this.isMultiChange.emit(this._isMulti);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxComponent.prototype, "isLoading", {
        get: function () {
            return this._isLoading;
        },
        set: function (isLoading) {
            if (this._isLoading === isLoading)
                return;
            this._isLoading = isLoading;
            this.isLoadingChange.emit(this._isLoading);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxComponent.prototype, "selectableCondition", {
        get: function () {
            return this._selectableCondition;
        },
        set: function (selectableCondition) {
            if (this._selectableCondition === selectableCondition)
                return;
            this._selectableCondition = selectableCondition;
            this.selectableConditionChange.emit(this._selectableCondition);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxComponent.prototype, "isSame", {
        get: function () {
            return this._isSame;
        },
        set: function (isSame) {
            if (this._isSame === isSame)
                return;
            this._isSame = isSame;
            this.isSameChange.emit(this._isSame);
        },
        enumerable: true,
        configurable: true
    });
    CheckboxComponent.prototype.ngAfterContentInit = function () {
        this.itemTemplate = defaults(this.itemTemplate, this.defaultItemTemplate);
        this.checkboxTemplate = defaults(this.checkboxTemplate, this.defaultCheckboxTemplate);
        this._itemsChange$ = this.itemsChange.subscribe(this.afterItemsChange, this.onError);
        this.afterItemsChange();
    };
    CheckboxComponent.prototype.ngAfterViewInit = function () {
        this._itemElementsChange$ = this.itemElements.changes.subscribe(this.updateItemWidth);
        this.itemElements.notifyOnChanges();
    };
    CheckboxComponent.prototype.ngOnDestroy = function () {
        this._itemsChange$.unsubscribe();
        this._itemElementsChange$.unsubscribe();
    };
    CheckboxComponent.prototype.afterItemsChange = function () {
        var _this = this;
        var selectedItems = this.data;
        this.queriedItems = [];
        this.isLoading = true;
        toObserver(this.items)
            .subscribe(function (items) {
            _this.isLoading = false;
            _this.queriedItems = _this.queriedItems.concat(items);
            _this.data = _.intersection(_this.queriedItems, selectedItems);
            _this.recalcIsChecked();
            _this.recalcSelectable();
        });
    };
    CheckboxComponent.prototype.recalcSelectable = function () {
        var _this = this;
        this.isSelectable = this.queriedItems.map(function (item) { return _this.selectableCondition(item); });
    };
    CheckboxComponent.prototype.updateItemWidth = function () {
        var _this = this;
        var maxWidth = this.itemElements.reduce(function (prev, item) { return Math.max(item.nativeElement.offsetWidth, prev); }, 100) + 10;
        this.itemElements.map(function (item) { return _this.renderer.setElementStyle(item.nativeElement, "width", maxWidth + 'px '); });
    };
    CheckboxComponent.prototype.onError = function (err) {
        console.error(err);
    };
    //- 功能函數
    CheckboxComponent.prototype.toggle = function (index) {
        if (!this.isSelectable[index])
            return;
        if (!this.isChecked[index] && this.data.length >= this.multi)
            return;
        this.isChecked[index] = !this.isChecked[index];
        if (this.isChecked[index]) {
            this.data.push(this.queriedItems[index]);
        }
        else {
            var idx = this.data.indexOf(this.queriedItems[index]);
            this.data.splice(idx, 1);
        }
    };
    CheckboxComponent.prototype.recalcIsChecked = function () {
        var _this = this;
        this.isChecked = this.queriedItems.map(function (item) { return _this.data.indexOf(item) !== -1; });
    };
    CheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ay-checkbox',
                    template: "\n    <ng-template [ngForOf]=\"queriedItems\" let-i=\"index\" let-item=\"\" ngFor=\"\"><button #itemElements=\"\" [ngClass]=\"{ disable: !isSelectable[i] }\" (click)=\"toggle(i)\" tabindex=\"1\"><div class=\"box\" [ngClass]=\"{ checked: isChecked[i] }\"></div><div class=\"label\">{{ item }}</div></button></ng-template>\n  ",
                    styles: ["\n    ay-checkbox {\n      display: inline-block;\n      cursor: pointer;\n      vertical-align: top; }\n      ay-checkbox .box {\n        display: inline-block;\n        position: relative;\n        border: 1px solid #E2E2E2;\n        border-radius: 3px;\n        width: 1em;\n        height: 1em;\n        margin: .25em .5em .25em 0; }\n        ay-checkbox .box:after {\n          display: block;\n          position: absolute;\n          top: .5em;\n          left: .1em;\n          transform: scaleX(-1) rotate(135deg);\n          transform-origin: left top;\n          border-right: 0.2em solid #308BC8;\n          border-top: 0.2em solid #308BC8;\n          content: '';\n          animation: ay-checkbox-off .2s linear;\n          height: .5em;\n          width: .25em;\n          opacity: 0; }\n        ay-checkbox .box.checked:after {\n          opacity: 1;\n          animation: ay-checkbox-on .2s linear; }\n      ay-checkbox button {\n        text-align: left;\n        margin-right: 2em;\n        display: inline-block;\n        padding: .25em 0em;\n        background-color: transparent;\n        border: none;\n        cursor: pointer;\n        line-height: 1.5em;\n        box-shadow: border-box; }\n        ay-checkbox button .label {\n          display: inline-block;\n          vertical-align: top;\n          line-height: 1.5em;\n          height: 1.5em;\n          color: #666; }\n        ay-checkbox button:focus {\n          outline: none; }\n          ay-checkbox button:focus .box {\n            box-shadow: 0 1px 7px rgba(0, 0, 0, 0.05), 0 7px 17px rgba(0, 0, 0, 0.1); }\n          ay-checkbox button:focus .label {\n            color: #000; }\n        ay-checkbox button.disable .box {\n          background-color: #E2E2E2;\n          box-shadow: none; }\n        ay-checkbox button.disable .label {\n          color: #666; }\n\n    @keyframes ay-checkbox-off {\n      100% {\n        opacity: 0; }\n      50% { }\n      0% {\n        opacity: 1; } }\n\n    @keyframes ay-checkbox-on {\n      0% {\n        width: 0;\n        height: 0; }\n      50% {\n        width: .25em;\n        height: 0; }\n      100% {\n        height: .5em; } }\n  "],
                    encapsulation: ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    CheckboxComponent.ctorParameters = function () { return [
        { type: Renderer, },
        { type: ApplicationRef, },
    ]; };
    CheckboxComponent.propDecorators = {
        'dataChange': [{ type: Output },],
        'data': [{ type: Input },],
        'items': [{ type: Input },],
        'isCheckedChange': [{ type: Output },],
        'isChecked': [{ type: Input },],
        'isMultiChange': [{ type: Output },],
        'multi': [{ type: Input, args: ["multi",] },],
        'isLoadingChange': [{ type: Output },],
        'selectableCondition': [{ type: Input, args: ["selectable",] },],
        'isSameChange': [{ type: Output },],
        'isSame': [{ type: Input },],
        'itemElements': [{ type: ViewChildren, args: ["itemElements",] },],
        'defaultItemTemplate': [{ type: ViewChild, args: ["defaultItemTemplate",] },],
        'itemTemplate': [{ type: ContentChild, args: ["itemTemplate",] },],
        'defaultCheckboxTemplate': [{ type: ViewChild, args: ["defaultCheckboxTemplate",] },],
        'checkboxTemplate': [{ type: ContentChild, args: ["checkboxTemplate",] },],
    };
    __decorate([
        bind
    ], CheckboxComponent.prototype, "afterItemsChange", null);
    __decorate([
        bind
    ], CheckboxComponent.prototype, "recalcSelectable", null);
    __decorate([
        bind
    ], CheckboxComponent.prototype, "updateItemWidth", null);
    __decorate([
        bind
    ], CheckboxComponent.prototype, "onError", null);
    __decorate([
        bind
    ], CheckboxComponent.prototype, "toggle", null);
    __decorate([
        bind
    ], CheckboxComponent.prototype, "recalcIsChecked", null);
    return CheckboxComponent;
}());
export { CheckboxComponent };
//# sourceMappingURL=checkbox.component.js.map