import { AfterContentInit, EventEmitter, ElementRef, TemplateRef, QueryList, Renderer, ApplicationRef } from '@angular/core';
import { toObservable } from "@ay/util";
export declare type SelectableCondition = (item: any) => boolean;
export declare type IsSame = (a: any, b: any) => boolean;
export declare class CheckboxComponent implements AfterContentInit {
    renderer: Renderer;
    appRef: ApplicationRef;
    private _itemElementsChange$;
    private _itemsChange$;
    queriedItems: any[];
    isSelectable: boolean[];
    /** data */
    private _data;
    dataChange: EventEmitter<any[]>;
    data: any[];
    /** items */
    private _items;
    itemsChange: EventEmitter<toObservable<any[]>>;
    items: toObservable<any[]>;
    /** isChecked */
    private _isChecked;
    isCheckedChange: EventEmitter<boolean[]>;
    isChecked: boolean[];
    /** isMulti */
    private _isMulti;
    isMultiChange: EventEmitter<number>;
    multi: number;
    /** isLoading */
    private _isLoading;
    isLoadingChange: EventEmitter<boolean>;
    isLoading: boolean;
    /** selectableCondition */
    private _selectableCondition;
    selectableConditionChange: EventEmitter<SelectableCondition>;
    selectableCondition: SelectableCondition;
    /** isSame */
    private _isSame;
    isSameChange: EventEmitter<IsSame>;
    isSame: IsSame;
    itemElements: QueryList<ElementRef>;
    defaultItemTemplate: ElementRef;
    itemTemplate: TemplateRef<any>;
    defaultCheckboxTemplate: ElementRef;
    checkboxTemplate: TemplateRef<any>;
    constructor(renderer: Renderer, appRef: ApplicationRef);
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    afterItemsChange(): void;
    recalcSelectable(): void;
    updateItemWidth(): void;
    onError(err: any): void;
    toggle(index: number): void;
    recalcIsChecked(): void;
}
