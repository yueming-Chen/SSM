var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Component, Output, ViewEncapsulation, EventEmitter, Input, HostListener, ViewChild, ContentChild } from '@angular/core';
import { bind, toObserver, defaults } from "@ay/util/dist";
import { Subject } from "rxjs/Subject";
var AutocompleteComponent = (function () {
    // 事件
    function AutocompleteComponent() {
        this.keydown = new Subject();
        this.debounce = 300;
        this.itemMaxCount = -1;
        this.itemsChange = new EventEmitter();
        this.dataChange = new EventEmitter();
        this.dropdownChange = new EventEmitter();
        /** select */
        this._selectItem = function (target, item) { return target.data = item; };
        this.selectChange = new EventEmitter();
        // element
        this.dropdownElement = null;
        this.inputElement = null;
        // template
        this.defaultItemUsedTemplate = null;
        this.itemUsedTemplate = null;
    }
    Object.defineProperty(AutocompleteComponent.prototype, "items", {
        get: function () {
            return this._items;
        },
        set: function (items) {
            if (this._items === items)
                return;
            this._items = items;
            this.itemsChange.emit(this._items);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutocompleteComponent.prototype, "data", {
        get: function () {
            return this._data;
        },
        set: function (data) {
            if (this._data === data)
                return;
            this._data = data;
            this.dataChange.emit(this._data);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutocompleteComponent.prototype, "dropdown", {
        get: function () {
            return this._dropdown;
        },
        set: function (dropdown) {
            if (this._dropdown === dropdown)
                return;
            this._dropdown = dropdown;
            this.dropdownChange.emit(this._dropdown);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutocompleteComponent.prototype, "selectItem", {
        get: function () {
            return this._selectItem;
        },
        set: function (select) {
            if (this._selectItem === select)
                return;
            this._selectItem = select;
            this.selectChange.emit(this._selectItem);
        },
        enumerable: true,
        configurable: true
    });
    AutocompleteComponent.prototype.ngAfterContentInit = function () {
        this.itemUsedTemplate = defaults(this.itemUsedTemplate, this.defaultItemUsedTemplate);
        this._keydown$ = this.keydown.debounceTime(this.debounce).subscribe(this.afterDataChange, this.onError);
        this._dropdown$ = this.dropdownChange.subscribe(this.afterDropdownChange, this.onError);
    };
    AutocompleteComponent.prototype.ngOnDestroy = function () {
        this._keydown$.unsubscribe();
        this._dropdown$.unsubscribe();
    };
    AutocompleteComponent.prototype.afterDataChange = function () {
        this.queriedItems = toObserver(this.items, this.data);
        this.isOpen = true;
    };
    AutocompleteComponent.prototype.afterDropdownChange = function () {
        this.selectItem(this, this.dropdown);
        // setTimeout(() => { }, 100);
    };
    AutocompleteComponent.prototype.onFocus = function () {
        this.isOpen = true;
    };
    AutocompleteComponent.prototype.onBlur = function () {
        this.isOpen = false;
    };
    AutocompleteComponent.prototype.onError = function (err) {
        console.error(err);
    };
    AutocompleteComponent.prototype.onCompositionStart = function () {
        this.isIMEComposing = true;
    };
    AutocompleteComponent.prototype.onCompositionEnd = function () {
        this.isIMEComposing = false;
    };
    AutocompleteComponent.prototype.onKeydown = function (e) {
        if (!this.isIMEComposing) {
            if (!this.dropdownElement.onKeydown(e)) {
                this.keydown.next(e);
            }
        }
    };
    AutocompleteComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ay-autocomplete',
                    template: "\n    <ng-template #defaultItemTemplate=\"\" let-disable=\"disable\" let-index=\"index\" let-item=\"item\" let-dropdown=\"dropdown\"><div class=\"item\" [innerHtml]=\"item | highlight : data\" [ngClass]=\"{ hover: dropdown.hoverIndex == index, disable: disable}\"></div></ng-template><ay-input #inputElement=\"\" [(data)]=\"data\" type=\"text\" [targetBlur]=\"onBlur\" (focus)=\"onFocus()\" [inputBackground]=\"inputBackground\"><ng-template #autocompleteTemplate=\"\"><div class=\"DingGongZi\"></div><ay-dropdown #dropdownElement=\"\" [(data)]=\"dropdown\" [(isOpen)]=\"isOpen\" [(items)]=\"queriedItems\" [maxCount]=\"itemMaxCount\"><ng-template #displayTemplate=\"\"></ng-template><ng-template #itemTemplate=\"\" let-disable=\"disable\" let-index=\"index\" let-item=\"item\" let-dropdown=\"dropdown\">{{ dropdown }}<ng-template [ngTemplateOutlet]=\"itemUsedTemplate\" [ngOutletContext]=\"{ disable: disable, index: index, item: item, dropdown: dropdown }\"></ng-template></ng-template></ay-dropdown></ng-template></ay-input>\n  ",
                    styles: ["\n    ay-autocomplete input {\n      vertical-align: top;\n      display: inline-block;\n      margin: 10px;\n      width: 100%;\n      box-sizing: border-box;\n      margin: 0; }\n      ay-autocomplete input input {\n        padding: .25em .5em;\n        font-size: 1em;\n        line-height: 1.5em;\n        border: 1px solid transparent;\n        outline: none !important;\n        transition: all .1s linear; }\n        ay-autocomplete input input:focus {\n          box-shadow: 0 1px 7px rgba(0, 0, 0, 0.05), 0 7px 17px rgba(0, 0, 0, 0.1); }\n\n    ay-autocomplete ay-dropdown {\n      width: 100%;\n      margin: 0;\n      position: absolute; }\n  "],
                    encapsulation: ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    AutocompleteComponent.ctorParameters = function () { return []; };
    AutocompleteComponent.propDecorators = {
        'inputBackground': [{ type: Input },],
        'debounce': [{ type: Input },],
        'itemMaxCount': [{ type: Input, args: ["maxCount",] },],
        'itemsChange': [{ type: Output },],
        'items': [{ type: Input },],
        'dataChange': [{ type: Output },],
        'data': [{ type: Input },],
        'dropdownChange': [{ type: Output },],
        'dropdown': [{ type: Input },],
        'selectItem': [{ type: Input },],
        'dropdownElement': [{ type: ViewChild, args: ["dropdownElement",] },],
        'inputElement': [{ type: ViewChild, args: ["inputElement",] },],
        'defaultItemUsedTemplate': [{ type: ViewChild, args: ["defaultItemTemplate",] },],
        'itemUsedTemplate': [{ type: ContentChild, args: ["itemTemplate",] },],
        'onCompositionStart': [{ type: HostListener, args: ["compositionstart",] },],
        'onCompositionEnd': [{ type: HostListener, args: ["compositionend",] },],
        'onKeydown': [{ type: HostListener, args: ["keydown", ["$event"],] },],
    };
    __decorate([
        bind
    ], AutocompleteComponent.prototype, "afterDataChange", null);
    __decorate([
        bind
    ], AutocompleteComponent.prototype, "afterDropdownChange", null);
    __decorate([
        bind
    ], AutocompleteComponent.prototype, "onFocus", null);
    __decorate([
        bind
    ], AutocompleteComponent.prototype, "onBlur", null);
    __decorate([
        bind
    ], AutocompleteComponent.prototype, "onError", null);
    __decorate([
        bind
    ], AutocompleteComponent.prototype, "onCompositionStart", null);
    __decorate([
        bind
    ], AutocompleteComponent.prototype, "onCompositionEnd", null);
    __decorate([
        bind
    ], AutocompleteComponent.prototype, "onKeydown", null);
    return AutocompleteComponent;
}());
export { AutocompleteComponent };
//# sourceMappingURL=autocomplete.component.js.map