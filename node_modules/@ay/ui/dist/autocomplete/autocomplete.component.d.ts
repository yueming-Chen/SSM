import { AfterContentInit, EventEmitter, ElementRef, TemplateRef } from '@angular/core';
import { toObservable } from "@ay/util/dist";
import { Observable } from "rxjs/Rx";
import { DropdownComponent } from "../dropdown/dropdown.component";
import { Subject } from "rxjs/Subject";
export declare type SelectItemCondition = (target: AutocompleteComponent, item: any) => void;
export declare class AutocompleteComponent implements AfterContentInit {
    private _dropdown$;
    private _keydown$;
    isIMEComposing: boolean;
    isOpen: boolean;
    keydown: Subject<{}>;
    queriedItems: Observable<any[]>;
    inputBackground: string;
    debounce: number;
    itemMaxCount: number;
    /** items */
    private _items;
    itemsChange: EventEmitter<toObservable<any>>;
    items: toObservable<any>;
    /** data */
    private _data;
    dataChange: EventEmitter<string>;
    data: string;
    /** dropdown */
    private _dropdown;
    dropdownChange: EventEmitter<string>;
    dropdown: string;
    /** select */
    private _selectItem;
    selectChange: EventEmitter<SelectItemCondition>;
    selectItem: SelectItemCondition;
    dropdownElement: DropdownComponent;
    inputElement: ElementRef;
    defaultItemUsedTemplate: ElementRef;
    itemUsedTemplate: TemplateRef<any>;
    constructor();
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    afterDataChange(): void;
    afterDropdownChange(): void;
    onFocus(): void;
    onBlur(): void;
    onError(err: any): void;
    onCompositionStart(): void;
    onCompositionEnd(): void;
    onKeydown(e: KeyboardEvent): void;
}
