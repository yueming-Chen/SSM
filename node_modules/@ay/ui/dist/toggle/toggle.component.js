import { Component, ViewEncapsulation, Output, Input, EventEmitter, ContentChild, ViewChild } from '@angular/core';
import { falsy, defaults } from "@ay/util";
var ToggleComponent = (function () {
    function ToggleComponent() {
        /** data */
        this._data = false;
        this.dataChange = new EventEmitter();
        this.isDisableChange = new EventEmitter();
        this.iconChange = new EventEmitter();
        this.defaultIconTemplate = null;
        this.iconTemplate = null;
        this.onColor = "#22618C";
        this.offColor = "#333333";
    }
    Object.defineProperty(ToggleComponent.prototype, "data", {
        get: function () {
            return this._data;
        },
        set: function (data) {
            if (this._data === data)
                return;
            this._data = data;
            this.dataChange.emit(this._data);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToggleComponent.prototype, "isDisable", {
        get: function () {
            return this._isDisable;
        },
        set: function (isDisable) {
            if (this._isDisable === isDisable)
                return;
            this._isDisable = falsy(isDisable);
            this.isDisableChange.emit(this._isDisable);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToggleComponent.prototype, "icon", {
        get: function () {
            return this._icon;
        },
        set: function (icon) {
            if (this._icon === icon)
                return;
            this._icon = icon;
            this.iconChange.emit(this._icon);
        },
        enumerable: true,
        configurable: true
    });
    ToggleComponent.prototype.toggle = function () {
        if (!this.isDisable) {
            this.data = !this.data;
        }
    };
    ToggleComponent.prototype.ngAfterContentInit = function () {
        this.iconTemplate = defaults(this.iconTemplate, this.defaultIconTemplate);
    };
    ToggleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ay-toggle',
                    template: "\n    <ng-template #defaultIconTemplate=\"\" let-data=\"data\" let-icon=\"icon\" let-offColor=\"offColor\" let-onColor=\"onColor\"><div class=\"fa\" [ngClass]=\"icon\" [ngStyle]=\"{ color: data ? onColor : offColor }\"></div></ng-template><button class=\"track\" [ngClass]=\"{ on: data, isDisable: isDisable }\" [ngStyle]=\"{ backgroundColor: data ? onColor : offColor }\" (click)=\"toggle()\" tabindex=\"1\"><div class=\"thumb\" [style.border-color]=\"data ? onColor : offColor\"><ng-template [ngTemplateOutlet]=\"iconTemplate\" [ngOutletContext]=\"{ icon: icon, data: data, onColor: onColor, offColor: offColor }\"></ng-template></div></button>\n  ",
                    styles: ["\n    ay-toggle {\n      display: inline-block;\n      position: relative;\n      height: 1.5em;\n      width: 3em;\n      vertical-align: top;\n      padding: .25em 0; }\n      ay-toggle .track {\n        display: inline-block;\n        position: relative;\n        border: none;\n        border-radius: 1.5em;\n        cursor: pointer;\n        width: 3em;\n        height: 1.5em;\n        outline: none;\n        box-sizing: border-box;\n        padding: 0;\n        transition: all .1s linear;\n        background: #333; }\n        ay-toggle .track.on {\n          background: #308BC8; }\n          ay-toggle .track.on .thumb {\n            left: 1.5625em; }\n            ay-toggle .track.on .thumb .fa {\n              color: #22618C; }\n        ay-toggle .track:focus {\n          box-shadow: 0 1px 7px rgba(0, 0, 0, 0.05), 0 7px 17px rgba(0, 0, 0, 0.1); }\n          ay-toggle .track:focus .thumb {\n            box-shadow: 0 1px 7px rgba(0, 0, 0, 0.05), 0 7px 17px rgba(0, 0, 0, 0.1); }\n        ay-toggle .track.isDisable {\n          cursor: not-allowed;\n          box-shadow: none; }\n          ay-toggle .track.isDisable .thumb {\n            cursor: not-allowed;\n            box-shadow: none; }\n      ay-toggle .thumb {\n        display: inline-flex;\n        position: absolute;\n        border: none;\n        cursor: pointer;\n        outline: none;\n        left: 0;\n        top: 0;\n        box-sizing: border-box;\n        border: 1px solid transparent;\n        vertical-align: middle;\n        width: 1.5em;\n        height: 1.5em;\n        border-radius: 1em;\n        background: #F2F2F2;\n        z-index: 200;\n        transition: all .1s linear; }\n        ay-toggle .thumb .fa {\n          font-size: .8em;\n          color: #000;\n          color: #ff2174;\n          align-items: center;\n          justify-content: center;\n          width: 100%;\n          height: 1em;\n          align-self: center; }\n  "],
                    encapsulation: ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    ToggleComponent.ctorParameters = function () { return []; };
    ToggleComponent.propDecorators = {
        'dataChange': [{ type: Output },],
        'data': [{ type: Input },],
        'isDisableChange': [{ type: Output },],
        'isDisable': [{ type: Input, args: ["disable",] },],
        'icon': [{ type: Input },],
        'defaultIconTemplate': [{ type: ViewChild, args: ["defaultIconTemplate",] },],
        'iconTemplate': [{ type: ContentChild, args: ["iconTemplate",] },],
        'onColor': [{ type: Input },],
        'offColor': [{ type: Input },],
    };
    return ToggleComponent;
}());
export { ToggleComponent };
//# sourceMappingURL=toggle.component.js.map