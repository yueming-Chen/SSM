import { AfterContentInit, OnDestroy, AfterViewInit, EventEmitter, QueryList, ElementRef, TemplateRef, Renderer } from "@angular/core";
import { toObservable } from "@ay/util";
import { ScrollComponent } from "../scroll/scroll.component";
export declare type IsEqual = (a, b) => boolean;
export declare type SelectItem = (item, index) => boolean;
export declare type HoverItem = (item, index) => boolean;
export declare type SelectableCondition = (item: any, index: number) => boolean;
export declare class DropdownComponent implements AfterContentInit, OnDestroy, AfterViewInit {
    ref: ElementRef;
    renderer: Renderer;
    private _itemsChange$;
    private _selectableChange$;
    private _hoverIndexChange$;
    private _isOpenChange$;
    private _updateItemsChange$;
    scrollHeight: number;
    dropdown: this;
    queriedItems: any[];
    isEnable: boolean;
    alwaysOpen: boolean;
    itemMaxCount: number;
    icon: string;
    /** scrollTop */
    private _scrollTop;
    scrollTopChange: EventEmitter<number>;
    scrollTop: number;
    /** data */
    private _data;
    dataChange: EventEmitter<any>;
    data: any;
    /** items */
    private _items;
    itemsChange: EventEmitter<toObservable<any[]>>;
    items: toObservable<any[]>;
    /** isOpen */
    private _isOpen;
    isOpenChange: EventEmitter<boolean>;
    isOpen: boolean;
    /** isFocus */
    private _isFocus;
    isFocusChange: EventEmitter<boolean>;
    isFocus: boolean;
    /** hoverIndex */
    private _hoverIndex;
    hoverIndexChange: EventEmitter<number>;
    hoverIndex: number;
    /** selectableCondition */
    private _selectableCondition;
    selectableConditionChange: EventEmitter<SelectableCondition>;
    selectableCondition: SelectableCondition;
    selectable: boolean[];
    /** isLoading */
    private _isLoading;
    isLoadingChange: EventEmitter<boolean>;
    isLoading: boolean;
    /** hoverItem */
    hoverItem: HoverItem;
    /** selectItem */
    selectItem: SelectItem;
    /** isEqual */
    private _isEqual;
    isEqualChange: EventEmitter<IsEqual>;
    isEqual: IsEqual;
    scroll: ElementRef;
    itemElements: QueryList<ElementRef>;
    scrollElement: ScrollComponent;
    dropdownElement: ElementRef;
    defaultLoadingTemplate: ElementRef;
    loadingTemplate: TemplateRef<any>;
    defaultDisplayTemplate: ElementRef;
    displayTemplate: any;
    defaultItemTemplate: ElementRef;
    itemTemplate: TemplateRef<any>;
    defaultIconTemplate: ElementRef;
    iconTemplate: TemplateRef<any>;
    constructor(ref: ElementRef, renderer: Renderer);
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    onItemsChange(): void;
    onSelectableConditionChange(): void;
    onIsOpenChange(): void;
    onHoverIndexChange(): void;
    onKeydown(event: KeyboardEvent): boolean;
    ngOnDestroy(): void;
    onError(err: any): void;
    queryItems(): any;
    afterQueryItems(items: any): void;
    onBlur(): void;
    onFocus(): void;
    removeExtraItems(): void;
    recalcScrollHeight(): void;
    recalcHoverIndex(): void;
    caleBeforeItemHeight(targetIndex: number): any;
    hoverIndexShift(direction: number): boolean;
    recalcScrollTop(): void;
    recalcItemIsSelectable(): void;
    toggle(): void;
}
