var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { EventEmitter, Output, Input, ViewChildren, ViewEncapsulation, ElementRef, ViewChild, ContentChild, HostListener, Component, Renderer } from "@angular/core";
import { toObserver, bind, defaults, preventDefaultEvent } from "@ay/util";
var DropdownComponent = (function () {
    //- 事件
    function DropdownComponent(ref, renderer) {
        var _this = this;
        this.ref = ref;
        this.renderer = renderer;
        //- 公有變數
        this.scrollHeight = 300;
        this.dropdown = this;
        this.queriedItems = [];
        //- 參數
        this.isEnable = true;
        this.alwaysOpen = false;
        this.itemMaxCount = -1;
        this.icon = "fa-angle-down";
        /** scrollTop */
        this._scrollTop = 0;
        this.scrollTopChange = new EventEmitter();
        /** data */
        this._data = "";
        this.dataChange = new EventEmitter();
        this.itemsChange = new EventEmitter();
        this.isOpenChange = new EventEmitter();
        this.isFocusChange = new EventEmitter();
        /** hoverIndex */
        this._hoverIndex = 0;
        this.hoverIndexChange = new EventEmitter();
        /** selectableCondition */
        this._selectableCondition = function (val, idx) { return true; };
        this.selectableConditionChange = new EventEmitter();
        this.selectable = [];
        this.isLoadingChange = new EventEmitter();
        /** hoverItem */
        this.hoverItem = function (item, index) {
            if (!_this.selectable[index])
                return false;
            _this.hoverIndex = index;
            return true;
        };
        /** selectItem */
        this.selectItem = function (item, index) {
            if (!_this.selectable[index])
                return false;
            _this.data = item;
            _this.isOpen = false;
            return true;
        };
        /** isEqual */
        this._isEqual = function (a, b) { return a === b; };
        this.isEqualChange = new EventEmitter();
        //- 元素
        this.scroll = null;
        this.scrollElement = null;
        //- 樣板
        this.defaultLoadingTemplate = null;
        this.loadingTemplate = null;
        this.defaultDisplayTemplate = null;
        this.displayTemplate = null;
        this.defaultItemTemplate = null;
        this.itemTemplate = null;
        this.defaultIconTemplate = null;
        this.iconTemplate = null;
    }
    Object.defineProperty(DropdownComponent.prototype, "scrollTop", {
        get: function () {
            return this._scrollTop;
        },
        set: function (scrollTop) {
            if (this._scrollTop === scrollTop)
                return;
            this._scrollTop = scrollTop;
            this.scrollTopChange.emit(this._scrollTop);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropdownComponent.prototype, "data", {
        get: function () {
            return this._data;
        },
        set: function (data) {
            if (this._data === data)
                return;
            this._data = data;
            this.dataChange.emit(this._data);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropdownComponent.prototype, "items", {
        get: function () {
            return this._items;
        },
        set: function (items) {
            if (this._items === items)
                return;
            this._items = items;
            this.itemsChange.emit(this._items);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropdownComponent.prototype, "isOpen", {
        get: function () {
            return this._isOpen;
        },
        set: function (isOpen) {
            if (this._isOpen === isOpen)
                return;
            this._isOpen = isOpen;
            this.isOpenChange.emit(this._isOpen);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropdownComponent.prototype, "isFocus", {
        get: function () {
            return this._isFocus;
        },
        set: function (isFocus) {
            if (this._isFocus === isFocus)
                return;
            this._isFocus = isFocus;
            this.isFocusChange.emit(this._isFocus);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropdownComponent.prototype, "hoverIndex", {
        get: function () {
            return this._hoverIndex;
        },
        set: function (hoverIndex) {
            if (this._hoverIndex === hoverIndex)
                return;
            this._hoverIndex = hoverIndex;
            this.hoverIndexChange.emit(this._hoverIndex);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropdownComponent.prototype, "selectableCondition", {
        get: function () {
            return this._selectableCondition;
        },
        set: function (selectableCondition) {
            if (this._selectableCondition === selectableCondition)
                return;
            this._selectableCondition = selectableCondition;
            this.selectableConditionChange.emit(this._selectableCondition);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropdownComponent.prototype, "isLoading", {
        get: function () {
            return this._isLoading;
        },
        set: function (isLoading) {
            if (this._isLoading === isLoading)
                return;
            this._isLoading = isLoading;
            this.isLoadingChange.emit(this._isLoading);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropdownComponent.prototype, "isEqual", {
        get: function () {
            return this._isEqual;
        },
        set: function (isEqual) {
            if (this._isEqual === isEqual)
                return;
            this._isEqual = isEqual;
            this.isEqualChange.emit(this._isEqual);
        },
        enumerable: true,
        configurable: true
    });
    DropdownComponent.prototype.ngAfterViewInit = function () {
        this.itemElements.changes.debounceTime(100).subscribe(this.recalcScrollHeight, this.onError);
        this.itemElements.notifyOnChanges();
    };
    DropdownComponent.prototype.ngAfterContentInit = function () {
        this.displayTemplate = defaults(this.displayTemplate, this.defaultDisplayTemplate);
        this.itemTemplate = defaults(this.itemTemplate, this.defaultItemTemplate);
        this.loadingTemplate = defaults(this.loadingTemplate, this.defaultLoadingTemplate);
        this.iconTemplate = defaults(this.iconTemplate, this.defaultIconTemplate);
        this._isOpenChange$ = this.isOpenChange
            .filter(function (val) { return val; })
            .subscribe(this.onIsOpenChange, this.onError);
        this._hoverIndexChange$ = this.hoverIndexChange
            .subscribe(this.onHoverIndexChange, this.onError);
        this._selectableChange$ = this.selectableConditionChange
            .subscribe(this.onSelectableConditionChange, this.onError);
        this._itemsChange$ = this.itemsChange
            .subscribe(this.onItemsChange, this.onError);
        this.queryItems();
    };
    DropdownComponent.prototype.onItemsChange = function () {
        this.queryItems();
    };
    DropdownComponent.prototype.onSelectableConditionChange = function () {
        this.recalcItemIsSelectable();
    };
    DropdownComponent.prototype.onIsOpenChange = function () {
        this.recalcHoverIndex();
    };
    DropdownComponent.prototype.onHoverIndexChange = function () {
        this.recalcScrollTop();
    };
    DropdownComponent.prototype.onKeydown = function (event) {
        var successful = false;
        if (event.key === "ArrowDown") {
            successful = this.hoverIndexShift(+1);
            if (!this.isOpen)
                this.selectItem(this.queriedItems[this.hoverIndex], this.hoverIndex);
        }
        else if (event.key === "ArrowUp") {
            successful = this.hoverIndexShift(-1);
            if (!this.isOpen)
                this.selectItem(this.queriedItems[this.hoverIndex], this.hoverIndex);
        }
        else if (event.key === "Enter") {
            if (this.isOpen) {
                successful = this.selectItem(this.queriedItems[this.hoverIndex], this.hoverIndex);
            }
            else {
                this.isOpen = true;
            }
        }
        if (successful) {
            preventDefaultEvent(event);
        }
        return successful;
    };
    DropdownComponent.prototype.ngOnDestroy = function () {
        if (this._selectableChange$) {
            this._selectableChange$.unsubscribe();
        }
        if (this._hoverIndexChange$) {
            this._hoverIndexChange$.unsubscribe();
        }
        if (this._isOpenChange$) {
            this._isOpenChange$.unsubscribe();
        }
        if (this._updateItemsChange$) {
            this._updateItemsChange$.unsubscribe();
        }
        if (this._itemsChange$) {
            this._itemsChange$.unsubscribe();
        }
    };
    DropdownComponent.prototype.onError = function (err) {
        console.error(err);
    };
    DropdownComponent.prototype.queryItems = function () {
        if (this._updateItemsChange$) {
            this._updateItemsChange$.unsubscribe();
        }
        if (!this.items) {
            return null;
        }
        this.queriedItems = [];
        this.isLoading = true;
        this._updateItemsChange$ = toObserver(this.items, this.data)
            .subscribe(this.afterQueryItems, this.onError);
    };
    DropdownComponent.prototype.afterQueryItems = function (items) {
        this.isLoading = false;
        this.queriedItems = this.queriedItems.concat(items);
        this.removeExtraItems();
        this.recalcItemIsSelectable();
        this.recalcHoverIndex();
        this.recalcScrollTop();
    };
    DropdownComponent.prototype.onBlur = function () {
        this.isOpen = false;
        this.isFocus = false;
    };
    DropdownComponent.prototype.onFocus = function () {
        this.isFocus = true;
    };
    //- 功能函數
    DropdownComponent.prototype.removeExtraItems = function () {
        if (this.itemMaxCount !== -1) {
            this.queriedItems = this.queriedItems.slice(0, this.itemMaxCount);
        }
    };
    DropdownComponent.prototype.recalcScrollHeight = function () {
        this.scrollHeight = this.itemElements
            .filter(function (item, index) { return index < 5; })
            .reduce(function (prev, item) { return prev + item.nativeElement.offsetHeight; }, 0);
    };
    DropdownComponent.prototype.recalcHoverIndex = function () {
        var _this = this;
        var idx = this.queriedItems.findIndex(function (item) { return _this.isEqual(item, _this.data); });
        if (idx !== -1)
            this.hoverIndex = idx;
    };
    DropdownComponent.prototype.caleBeforeItemHeight = function (targetIndex) {
        if (!this.itemElements) {
            return 0;
        }
        return this.itemElements
            .filter(function (item, index) { return index <= targetIndex; })
            .reduce(function (prev, item) { return prev + item.nativeElement.offsetHeight; }, 0);
    };
    DropdownComponent.prototype.hoverIndexShift = function (direction) {
        var index = this.hoverIndex;
        while (true) {
            index += direction;
            if (index >= this.queriedItems.length) {
                index = 0;
            }
            else if (index < 0) {
                index = this.queriedItems.length - 1;
            }
            if (this.hoverIndex === index) {
                break;
            }
            if (this.selectable[index]) {
                break;
            }
        }
        this.hoverIndex = index;
        return true;
    };
    DropdownComponent.prototype.recalcScrollTop = function () {
        if (!this.scrollElement) {
            this.scrollTop = 0;
            return;
        }
        var height = this.caleBeforeItemHeight(this.hoverIndex);
        var height2 = this.caleBeforeItemHeight(this.hoverIndex - 1);
        if (!this.scrollElement.displayY) {
            this.scrollTop = 0;
        }
        else if (this.scrollTop < height - this.scrollElement.height) {
            this.scrollTop = height - this.scrollElement.height;
        }
        else if (this.scrollTop > height2) {
            this.scrollTop = height2;
        }
    };
    DropdownComponent.prototype.recalcItemIsSelectable = function () {
        var _this = this;
        this.selectable = this.queriedItems
            .map(function (item, index) { return _this.selectableCondition(item, index); });
    };
    DropdownComponent.prototype.toggle = function () {
        if (this.isEnable) {
            this.isOpen = !this.isOpen;
        }
    };
    DropdownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ay-dropdown',
                    template: "\n    <ng-template #defaultIconTemplate=\"\" let-dropdown=\"dropdown\" let-icon=\"icon\"><div class=\"fa\" *ngIf=\"icon\" [ngClass]=\"icon\"></div></ng-template><ng-template #defaultDisplayTemplate=\"\" let-display=\"display\" let-dropdown=\"dropdown\"><div class=\"display\" [ngClass]=\"{ isOpen: dropdown.isOpen, isFocus: dropdown.isFocus }\"><div class=\"label\">{{ display }}</div><ng-template [ngTemplateOutlet]=\"iconTemplate\" [ngOutletContext]=\"{ icon: dropdown.icon, dropdown: dropdown }\"></ng-template></div></ng-template><ng-template #defaultItemTemplate=\"\" let-disable=\"disable\" let-dropdown=\"dropdown\" let-index=\"index\" let-item=\"item\"><div class=\"item\" [ngClass]=\"{ hover: dropdown.hoverIndex == index, disable: disable}\">{{ item }}</div></ng-template><ng-template #defaultLoadingTemplate=\"\" let-dropdown=\"dropdown\"><div class=\"loading\"><div class=\"inner\">\u8CC7\u6599\u8F09\u5165\u4E2D\u8ACB\u7A0D\u5019...</div></div></ng-template><div class=\"display-wrapper\" (blur)=\"onBlur()\" (click)=\"toggle()\" (focus)=\"onFocus()\" tabindex=\"1\"><ng-template [ngTemplateOutlet]=\"displayTemplate\" [ngOutletContext]=\"{ display: data, dropdown: dropdown }\"></ng-template></div><div class=\"items\" *ngIf=\"items &amp;&amp; isOpen\" #dropdownElement=\"\"><ng-template [ngIf]=\"!isLoading\" [ngIfElse]=\"elseElement\" [ngIfThen]=\"thenElement\"></ng-template><ng-template #thenElement=\"\"><ay-scroll #scrollElement=\"\" [(scrollTop)]=\"scrollTop\" [height]=\"scrollHeight\"><div class=\"item-wrapper\" *ngFor=\"let item of queriedItems; let i = index\" #itemElements=\"\" (mousedown)=\"selectItem(item, i)\" (mouseenter)=\"hoverItem(item, i)\"><ng-template [ngTemplateOutlet]=\"itemTemplate\" [ngOutletContext]=\"{ item: item, dropdown: dropdown, index: i, disable: !selectable[i] }\"></ng-template></div></ay-scroll></ng-template><ng-template #elseElement=\"\"><ng-template [ngTemplateOutlet]=\"loadingTemplate\" let-dropdown=\"dropdown\"></ng-template></ng-template></div>\n  ",
                    styles: ["\n    ay-dropdown {\n      display: inline-block;\n      position: relative;\n      background-color: #FFF;\n      vertical-align: top; }\n      ay-dropdown .display-wrapper:focus {\n        outline: none; }\n      ay-dropdown .loading {\n        line-height: 1.5em;\n        padding: .25em .5em;\n        color: #333; }\n        ay-dropdown .loading .inner {\n          font-size: .8em; }\n      ay-dropdown .display {\n        display: flex;\n        position: relative;\n        vertical-align: top;\n        cursor: pointer;\n        font-size: 1em;\n        border: none;\n        border: 1px solid transparent;\n        user-select: none;\n        padding: .25em .5em .25em .5em;\n        flex-direction: row;\n        box-sizing: border-box; }\n        ay-dropdown .display .label {\n          min-width: 6em;\n          line-height: 1.5em;\n          flex: 1; }\n        ay-dropdown .display .fa {\n          width: 2em;\n          line-height: 1.5em;\n          text-align: center; }\n        ay-dropdown .display.isOpen, ay-dropdown .display.isFocus, ay-dropdown .display:hover {\n          box-shadow: 0 1px 7px rgba(0, 0, 0, 0.05), 0 7px 17px rgba(0, 0, 0, 0.1);\n          outline: none !important;\n          background: #E2E2E2;\n          position: relative;\n          box-shadow: 0 1px 7px rgba(0, 0, 0, 0.05), 0 7px 17px rgba(0, 0, 0, 0.1);\n          outline: none !important; }\n      ay-dropdown .items {\n        box-shadow: 0 1px 7px rgba(0, 0, 0, 0.05), 0 7px 17px rgba(0, 0, 0, 0.1);\n        position: absolute;\n        left: 0;\n        overflow: hidden;\n        width: 100%;\n        z-index: 200;\n        background-color: #fff;\n        transition: all .1s linear; }\n        ay-dropdown .items .item {\n          font-size: 1em;\n          padding: .25em .5em;\n          cursor: pointer;\n          user-select: none;\n          background-color: #FFF;\n          transition: all .1s linear; }\n          ay-dropdown .items .item.disable {\n            cursor: no-drop; }\n          ay-dropdown .items .item.hover {\n            background-color: #F2F2F2; }\n  "],
                    encapsulation: ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    DropdownComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer, },
    ]; };
    DropdownComponent.propDecorators = {
        'isEnable': [{ type: Input, args: ["enable",] },],
        'alwaysOpen': [{ type: Input, args: ["alwaysOpen",] },],
        'itemMaxCount': [{ type: Input, args: ["maxCount",] },],
        'icon': [{ type: Input },],
        'dataChange': [{ type: Output },],
        'data': [{ type: Input },],
        'items': [{ type: Input },],
        'isOpenChange': [{ type: Output },],
        'isOpen': [{ type: Input },],
        'isFocusChange': [{ type: Output },],
        'isFocus': [{ type: Input },],
        'hoverIndexChange': [{ type: Output },],
        'hoverIndex': [{ type: Input },],
        'selectableCondition': [{ type: Input, args: ["selectable",] },],
        'isLoadingChange': [{ type: Output },],
        'hoverItem': [{ type: Input },],
        'selectItem': [{ type: Input },],
        'isEqual': [{ type: Input },],
        'scroll': [{ type: ViewChild, args: ["scrollElement",] },],
        'itemElements': [{ type: ViewChildren, args: ["itemElements",] },],
        'scrollElement': [{ type: ViewChild, args: ["scrollElement",] },],
        'dropdownElement': [{ type: ViewChild, args: ["dropdownElement",] },],
        'defaultLoadingTemplate': [{ type: ViewChild, args: ["defaultLoadingTemplate",] },],
        'loadingTemplate': [{ type: ContentChild, args: ["loadingTemplate",] },],
        'defaultDisplayTemplate': [{ type: ViewChild, args: ["defaultDisplayTemplate",] },],
        'displayTemplate': [{ type: ContentChild, args: ["displayTemplate",] },],
        'defaultItemTemplate': [{ type: ViewChild, args: ["defaultItemTemplate",] },],
        'itemTemplate': [{ type: ContentChild, args: ["itemTemplate",] },],
        'defaultIconTemplate': [{ type: ViewChild, args: ["defaultIconTemplate",] },],
        'iconTemplate': [{ type: ContentChild, args: ["iconTemplate",] },],
        'onKeydown': [{ type: HostListener, args: ["keydown", ["$event"],] },],
    };
    __decorate([
        bind
    ], DropdownComponent.prototype, "onItemsChange", null);
    __decorate([
        bind
    ], DropdownComponent.prototype, "onSelectableConditionChange", null);
    __decorate([
        bind
    ], DropdownComponent.prototype, "onIsOpenChange", null);
    __decorate([
        bind
    ], DropdownComponent.prototype, "onHoverIndexChange", null);
    __decorate([
        bind
    ], DropdownComponent.prototype, "onError", null);
    __decorate([
        bind
    ], DropdownComponent.prototype, "queryItems", null);
    __decorate([
        bind
    ], DropdownComponent.prototype, "afterQueryItems", null);
    __decorate([
        bind
    ], DropdownComponent.prototype, "onBlur", null);
    __decorate([
        bind
    ], DropdownComponent.prototype, "onFocus", null);
    __decorate([
        bind
    ], DropdownComponent.prototype, "removeExtraItems", null);
    __decorate([
        bind
    ], DropdownComponent.prototype, "recalcScrollHeight", null);
    __decorate([
        bind
    ], DropdownComponent.prototype, "recalcHoverIndex", null);
    __decorate([
        bind
    ], DropdownComponent.prototype, "caleBeforeItemHeight", null);
    __decorate([
        bind
    ], DropdownComponent.prototype, "hoverIndexShift", null);
    __decorate([
        bind
    ], DropdownComponent.prototype, "recalcScrollTop", null);
    __decorate([
        bind
    ], DropdownComponent.prototype, "recalcItemIsSelectable", null);
    __decorate([
        bind
    ], DropdownComponent.prototype, "toggle", null);
    return DropdownComponent;
}());
export { DropdownComponent };
//# sourceMappingURL=dropdown.component.js.map