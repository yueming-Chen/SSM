import { Component, Input, Output, EventEmitter, ViewChild, ContentChild, ViewEncapsulation } from '@angular/core';
import { defaults } from "@ay/util/dist";
var InputComponent = (function () {
    function InputComponent() {
        this.targetKeydown = new EventEmitter();
        this.targetKeyPress = new EventEmitter();
        this.targetKeyUp = new EventEmitter();
        this.inputBackground = "white";
        this.icon = "";
        this.iconPlace = "left";
        this.placeholder = "";
        this.label = null;
        this.error = null;
        this.dataChange = new EventEmitter();
        this.targetBlurChange = new EventEmitter();
        this.type = null;
        this.name = "ay-input-" + InputComponent.idx++;
        /** Content */
        this.defaultContentTemplate = null;
        this.contentTemplate = null;
        /** Label */
        this.defaultLabelTemplate = null;
        this.labelTemplate = null;
        /** defaultAutocompleteTemplate */
        this.defaultAutocompleteTemplate = null;
        this.autocompleteTemplate = null;
        this.targetBlur = function () { };
    }
    Object.defineProperty(InputComponent.prototype, "data", {
        get: function () {
            return this._data;
        },
        set: function (data) {
            if (this._data === data)
                return;
            this._data = data;
            this.dataChange.emit(this._data);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputComponent.prototype, "targetBlur", {
        get: function () {
            return this._targetBlur;
        },
        set: function (targetBlur) {
            if (this._targetBlur === targetBlur)
                return;
            this._targetBlur = targetBlur;
            this.targetBlurChange.emit(this._targetBlur);
        },
        enumerable: true,
        configurable: true
    });
    InputComponent.prototype.ngAfterContentInit = function () {
        this.contentTemplate = defaults(this.contentTemplate, this.defaultContentTemplate);
        this.labelTemplate = defaults(this.labelTemplate, this.defaultLabelTemplate);
        this.autocompleteTemplate = defaults(this.autocompleteTemplate, this.defaultAutocompleteTemplate);
    };
    InputComponent.prototype.ngAfterViewInit = function () {
    };
    InputComponent.prototype.keyDown = function ($event) {
        this.targetKeydown.emit($event);
    };
    InputComponent.prototype.keyPress = function ($event) {
        this.targetKeyPress.emit($event);
    };
    InputComponent.prototype.keyUp = function ($event) {
        this.targetKeyUp.emit($event);
    };
    InputComponent.idx = 0;
    InputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ay-input',
                    template: "\n    <ng-template #defaultContentTemplate=\"\" let-error=\"error\" let-name=\"name\" let-placeholder=\"placeholder\" let-type=\"type\"><input [(ngModel)]=\"data\" [id]=\"name\" [name]=\"name\" [ngClass]=\"{ error: error }\" [placeholder]=\"placeholder\" [type]=\"type\" (blur)=\"targetBlur()\" (keydown)=\"keyDown($event)\" (keypress)=\"keyPress($event)\" (keyup)=\"keyUp($event)\" [style.background]=\"inputBackground\" [class.invisible]=\"inputBackground=='none'\"></ng-template><ng-template #defaultLabelTemplate=\"\" let-label=\"label\" let-name=\"name\"><label *ngIf=\"label\" [for]=\"name\">{{ label }}</label></ng-template><ng-template #defaultAutocompleteTemplate=\"\"></ng-template><div class=\"flex-row\"><ng-template [ngTemplateOutlet]=\"labelTemplate\" [ngOutletContext]=\"{ label: label, name: name }\"></ng-template><div class=\"flex-1 flex-row\"><div class=\"fa\" *ngIf=\"icon &amp;&amp; iconPlace == 'left'\" [ngClass]=\"icon\"></div><div class=\"content flex-1\"><ng-template [ngTemplateOutlet]=\"contentTemplate\" [ngOutletContext]=\"{ error: error, name: name, placeholder: placeholder, type: type }\"></ng-template><ng-template [ngTemplateOutlet]=\"autocompleteTemplate\"></ng-template></div><div class=\"fa\" *ngIf=\"icon &amp;&amp; iconPlace == 'right'\" [ngClass]=\"icon\"></div></div></div><div class=\"error-message\" *ngIf=\"error\">{{ error }}</div>\n  ",
                    styles: ["\n    ay-input {\n      display: block;\n      width: 100%;\n      box-sizing: border-box;\n      position: relative; }\n      ay-input label {\n        font-size: .8em;\n        line-height: 2.5em;\n        width: 6em;\n        display: inline-block;\n        text-align: right;\n        margin-right: 1em; }\n      ay-input > .flex-row > .flex-1.flex-row > .fa {\n        position: absolute;\n        left: 0;\n        width: 2em;\n        text-align: center;\n        line-height: 2em;\n        color: #757575; }\n      ay-input .content + .fa {\n        right: 0; }\n      ay-input .fa + .content input {\n        padding-left: 2em; }\n      ay-input input {\n        padding: .25em .5em;\n        font-size: 1em;\n        line-height: 1.5em;\n        border: 1px solid transparent;\n        outline: none !important;\n        min-width: 1em;\n        width: 100%;\n        box-sizing: border-box;\n        transition: all .1s linear; }\n        ay-input input.error {\n          position: relative;\n          color: #F85361;\n          border: 1px solid #FF0000;\n          animation-name: ay-input-error;\n          animation-duration: 1s;\n          animation-iteration-count: infinite;\n          position: relative; }\n        ay-input input:focus {\n          box-shadow: 0 1px 7px rgba(0, 0, 0, 0.05), 0 7px 17px rgba(0, 0, 0, 0.1);\n          animation-name: none;\n          animation-duration: 1s;\n          animation-iteration-count: infinite; }\n        ay-input input.error:focus {\n          border: 1px solid #F85361;\n          color: #324A5E; }\n        ay-input input.invisible:focus {\n          box-shadow: none;\n          animation-name: none;\n          animation-duration: 0s; }\n      ay-input .error-message {\n        color: #F85361;\n        line-height: 1.2em;\n        margin-left: 7em;\n        font-size: .8em;\n        height: 1.2em; }\n\n    @keyframes ay-input-error {\n      0% {\n        border-color: #F85361; }\n      50% {\n        border-color: #FFFFFF; }\n      100% {\n        border-color: #F85361; } }\n  "],
                    encapsulation: ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    InputComponent.ctorParameters = function () { return []; };
    InputComponent.propDecorators = {
        'targetKeydown': [{ type: Output },],
        'targetKeyPress': [{ type: Output },],
        'targetKeyUp': [{ type: Output },],
        'inputBackground': [{ type: Input },],
        'icon': [{ type: Input },],
        'iconPlace': [{ type: Input },],
        'placeholder': [{ type: Input },],
        'label': [{ type: Input },],
        'error': [{ type: Input },],
        'dataChange': [{ type: Output },],
        'data': [{ type: Input },],
        'targetBlurChange': [{ type: Output },],
        'targetBlur': [{ type: Input },],
        'type': [{ type: Input },],
        'name': [{ type: Input },],
        'defaultContentTemplate': [{ type: ViewChild, args: ["defaultContentTemplate",] },],
        'contentTemplate': [{ type: ContentChild, args: ["contentTemplate",] },],
        'defaultLabelTemplate': [{ type: ViewChild, args: ["defaultLabelTemplate",] },],
        'labelTemplate': [{ type: ContentChild, args: ["labelTemplate",] },],
        'defaultAutocompleteTemplate': [{ type: ViewChild, args: ["defaultAutocompleteTemplate",] },],
        'autocompleteTemplate': [{ type: ContentChild, args: ["autocompleteTemplate",] },],
    };
    return InputComponent;
}());
export { InputComponent };
//# sourceMappingURL=input.component.js.map