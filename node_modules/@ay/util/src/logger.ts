// import * as colors from "colors";
import { Observer } from "rxjs/Rx";
import { Subject } from "rxjs/Subject";
import * as moment from "moment";

try {
  let colors = require('colors');
  colors.setTheme({
    log: 'grey',
    date: 'grey',
    info: 'green',
    warning: 'yellow',
    debug: 'blue',
    error: 'red'
  });
} catch (e) {

}
export type Log = {
  type: string;
  message: string;
}

export class Logger extends Subject<any> {
  log(title: string, args?: any) {
    this.next({ type: "log", title, args });
  }
  info(title: string, args?: any) {
    this.next({ type: "info", title, args });
  }
  warning(title: string, args?: any) {
    this.next({ type: "warning", title, args });
  }
  debug(title: string, args?: any) {
    this.next({ type: "debug", title, args });
  }
  error(title: string, args?: any) {
    this.next({ type: "error", title, args });
  }
}

export var logger = new Logger();
logger
  .subscribe(e => {
    let date = moment().format(" HH:mm");
    switch (e.type) {
      case "log":
        console.log(((date + " LOG   ") as any).bgWhite.black + (("" as any).white) + " " + e.title);
        break;
      case "info":
        console.log(((date + " INFO  ") as any).bgGreen.black + (("" as any).green) + " " + e.title);
        break;
      case "warning":
        console.log(((date + " WARN  ") as any).bgMagenta.white + (("" as any).magenta) + " " + e.title);
        break;
      case "debug":
        console.log(((date + " DEBUG ") as any).bgYellow.black + (("" as any).yellow) + " " + e.title);
        break;
      case "error":
        console.log(((date + " ERROR ") as any).bgRed.white + (("" as any).red) + " " + e.title);
        break;
    }
  });
