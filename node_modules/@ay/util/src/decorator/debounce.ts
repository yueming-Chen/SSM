import { isEqual } from "../isEqual";

type Cache = {
  params: any[],
  timeout?: any // 前端沒有 NodeJS.Timer
}



/**
 * [Function Decorator]
 * 該函數如果沒有被在{wait}豪秒內再次呼叫，才真正執行該函數，函數回傳型態將改為 Promise
 * @param {number} wait 防彈跳時間(毫秒)(預設3000ms)
 * @param {boolean} deep 檢查參數時是否深度檢查(預設不深度檢查)
 */
export function debounce(wait: number = 300, deep: boolean = false) {
  return function decorator(target, key, descriptor) {
    const func = descriptor.value;
    let caches: Cache[] = [];
    descriptor.value = (...params) => {
      let cache = caches.find(cache => isEqual(cache.params, params, deep));
      if (cache === undefined) {
        cache = { params };
        caches.push(cache);
      }
      return new Promise((resolve, reject) => {
        if (cache.timeout) clearTimeout(cache.timeout);
        cache.timeout = setTimeout(() => {
          cache.timeout = null;
          try {
            resolve(func.apply(this, [...params]));
          } catch (e) {
            reject(e);
          }
        }, wait);
      });
    };
    return descriptor;
  };
}
