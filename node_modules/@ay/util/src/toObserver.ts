import { Observable } from "rxjs";
export type Func<T> = (...args: any[]) => T;
export type toObservable<T> = T | Promise<T> | Observable<T> | Func<T> | Func<Promise<T>> | Func<Observable<T>>;
export function toObserver<T>(val: toObservable<T>, ...args: any[]): Observable<T> {
  if (val instanceof Function) {
    val = val(...args);
  }

  if (val instanceof Observable) {
    return val;
  } else if (val instanceof Promise) {
    return Observable.fromPromise(val);
  } else {
    val = new Promise(resolve => resolve(val));
    return Observable.fromPromise(val);
  }
}
