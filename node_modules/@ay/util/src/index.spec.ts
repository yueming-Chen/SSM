import * as mocha from "mocha";
import * as should from "should";
import * as assert from "assert";
require("should");
import { defaults, safeCallback, leftPad, rightPad, inArray, rand, toObserver, falsy, values, log, cache, debounce, isEqual } from "./index";
import { Subject } from "rxjs";

describe("util", () => {
  it("defaults", () => {
    defaults(null, "A").should.equal("A");
    defaults("A", "B").should.equal("A");
  });

  it("safeCallback", () => {
    let fn = () => "success";
    safeCallback(fn)().should.equal("success");
    try {
      safeCallback(null)(); // 可以正常運作
      assert(true);
    } catch (e) {
      assert(false);
    }
  });

  it("leftPad & rightPad", () => {
    leftPad(3, 2).should.equal("03");
    rightPad(3, 2).should.equal("3 ");
  });

  it("inArray", () => {
    inArray(1, [1, 2, 3, 4]).should.equal(true);
    inArray(5, [1, 2, 3, 4]).should.equal(false);
  });

  it("rand", () => {
    rand().should.lessThan(1).and.greaterThan(0);
    rand(1, 100, true).should.be.lessThan(100).and.greaterThanOrEqual(1);
    rand(1, 100, true).toString().should.match(/\d+/);
  });

  it("toObserver", () => {
    toObserver(1).subscribe(n => n.should.be.equal(1))
    let promise = new Promise((resolve, reject) => resolve(14));
    toObserver(promise).subscribe(n => n.should.be.equal(14));
    let observer = new Subject()
    observer.next("success")
    toObserver(observer).subscribe(n => n.should.be.equal("success"));
    let fn = (arg) => arg;
    toObserver(fn, 1).subscribe(n => n.should.be.equal(1));
    toObserver(fn, promise).subscribe(n => n.should.be.equal(14));
    toObserver(fn, observer).subscribe(n => n.should.be.equal("success"));
  });

  it("falsy", () => {
    falsy("false").should.be.false();
    falsy("null").should.be.false();
    falsy("undefined").should.be.false();
    falsy("0").should.be.false();
    falsy("NaN").should.be.false();
    falsy(undefined).should.be.false();
    falsy(null).should.be.false();
    falsy(false).should.be.false();
    falsy(null).should.be.false();
    falsy(0).should.be.false();
    falsy(NaN).should.be.false();
  });

  describe("values", () => {
    it("values", () => {
      let objs = {
        "A": { score: 90 },
        "B": { score: 80 },
        "C": { score: 70 }
      }
      let arr = values(objs);
      arr.length.should.be.equal(3);
      arr[0]['key'].should.be.equal("A");
    });

    it("values", () => {
      let objs = {
        "A": { score: 90 },
        "B": { score: 80 },
        "C": { score: 70 }
      }
      let arr = values(objs, false);
      arr.length.should.be.equal(3);
    });
  });


  it('log decorator', (done) => {
    let proxy = console.log;

    console.log = (...args) => {
      console.log = proxy;
      args[0].should.match(/^Calc\.addTo\(0,10\) = 55 \(\d+\ms\)$/);
      done();
    }

    class Calc {
      @log
      static addTo(from: number, to: number) {
        let sum = 0;
        for (let i = from; i <= to; i++) sum += i;
        return sum;
      }
    }

    Calc.addTo(0, 10);
  });

  class DebounceCalc {
    @debounce()
    static addTo(from: number, to: number) {
      if (to < from) throw "'to' less then 'from'";
      let sum = 0;
      for (let i = from; i <= to; i++) {
        sum += i;
      }
      return sum;
    }
  }

  describe('debounce', () => {
    it('正常運作', (done) => {
      let start = Date.now();
      let t = 0;
      let interval = setInterval(() => {
        (DebounceCalc.addTo(0, 100) as any)
          .then(e => {
            let end = Date.now();
            let spend = end - start;
            spend.should.greaterThanOrEqual(100);
            done();
          });
        t++;
        if (t > 10) clearInterval(interval);
      }, 10);
    });

    it('執行過程發生錯誤', (done) => {
      let t = 0;
      let interval = setInterval(() => {
        let p = (DebounceCalc.addTo(0, -100) as any) as Promise<any>;
        p.then(e => done(false)).catch(e => done());
        t++;
        if (t > 10) clearInterval(interval);
      })
    });
  });

  describe('isSame', () => {
    it('array完全一至', () => isEqual([1, 2, 3], [1, 2, 3], true).should.true());
    it('array某個值不同', () => isEqual([1, 2, 3], [1, 2, 5], true).should.false());
    it('array個數不同', () => isEqual([1, 2, 3], [1, 2], true).should.false());
    it('物件陣列某個值不同', () => isEqual({ a: [1, 2, 3] }, { a: [1, 2, 5] }, true).should.false());
    it('物件陣列相同', () => isEqual({ a: [1, 2, 3] }, { a: [1, 2, 3] }, true).should.true());
  })
});
