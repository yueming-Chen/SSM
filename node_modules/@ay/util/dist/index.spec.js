"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert = require("assert");
require("should");
var index_1 = require("./index");
var rxjs_1 = require("rxjs");
describe("util", function () {
    it("defaults", function () {
        index_1.defaults(null, "A").should.equal("A");
        index_1.defaults("A", "B").should.equal("A");
    });
    it("safeCallback", function () {
        var fn = function () { return "success"; };
        index_1.safeCallback(fn)().should.equal("success");
        try {
            index_1.safeCallback(null)(); // 可以正常運作
            assert(true);
        }
        catch (e) {
            assert(false);
        }
    });
    it("leftPad & rightPad", function () {
        index_1.leftPad(3, 2).should.equal("03");
        index_1.rightPad(3, 2).should.equal("3 ");
    });
    it("inArray", function () {
        index_1.inArray(1, [1, 2, 3, 4]).should.equal(true);
        index_1.inArray(5, [1, 2, 3, 4]).should.equal(false);
    });
    it("rand", function () {
        index_1.rand().should.lessThan(1).and.greaterThan(0);
        index_1.rand(1, 100, true).should.be.lessThan(100).and.greaterThanOrEqual(1);
        index_1.rand(1, 100, true).toString().should.match(/\d+/);
    });
    it("toObserver", function () {
        index_1.toObserver(1).subscribe(function (n) { return n.should.be.equal(1); });
        var promise = new Promise(function (resolve, reject) { return resolve(14); });
        index_1.toObserver(promise).subscribe(function (n) { return n.should.be.equal(14); });
        var observer = new rxjs_1.Subject();
        observer.next("success");
        index_1.toObserver(observer).subscribe(function (n) { return n.should.be.equal("success"); });
        var fn = function (arg) { return arg; };
        index_1.toObserver(fn, 1).subscribe(function (n) { return n.should.be.equal(1); });
        index_1.toObserver(fn, promise).subscribe(function (n) { return n.should.be.equal(14); });
        index_1.toObserver(fn, observer).subscribe(function (n) { return n.should.be.equal("success"); });
    });
    it("falsy", function () {
        index_1.falsy("false").should.be.false();
        index_1.falsy("null").should.be.false();
        index_1.falsy("undefined").should.be.false();
        index_1.falsy("0").should.be.false();
        index_1.falsy("NaN").should.be.false();
        index_1.falsy(undefined).should.be.false();
        index_1.falsy(null).should.be.false();
        index_1.falsy(false).should.be.false();
        index_1.falsy(null).should.be.false();
        index_1.falsy(0).should.be.false();
        index_1.falsy(NaN).should.be.false();
    });
    describe("values", function () {
        it("values", function () {
            var objs = {
                "A": { score: 90 },
                "B": { score: 80 },
                "C": { score: 70 }
            };
            var arr = index_1.values(objs);
            arr.length.should.be.equal(3);
            arr[0]['key'].should.be.equal("A");
        });
        it("values", function () {
            var objs = {
                "A": { score: 90 },
                "B": { score: 80 },
                "C": { score: 70 }
            };
            var arr = index_1.values(objs, false);
            arr.length.should.be.equal(3);
        });
    });
    it('log decorator', function (done) {
        var proxy = console.log;
        console.log = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            console.log = proxy;
            args[0].should.match(/^Calc\.addTo\(0,10\) = 55 \(\d+\ms\)$/);
            done();
        };
        var Calc = (function () {
            function Calc() {
            }
            Calc.addTo = function (from, to) {
                var sum = 0;
                for (var i = from; i <= to; i++)
                    sum += i;
                return sum;
            };
            return Calc;
        }());
        __decorate([
            index_1.log,
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Number, Number]),
            __metadata("design:returntype", void 0)
        ], Calc, "addTo", null);
        Calc.addTo(0, 10);
    });
    var DebounceCalc = (function () {
        function DebounceCalc() {
        }
        DebounceCalc.addTo = function (from, to) {
            if (to < from)
                throw "'to' less then 'from'";
            var sum = 0;
            for (var i = from; i <= to; i++) {
                sum += i;
            }
            return sum;
        };
        return DebounceCalc;
    }());
    __decorate([
        index_1.debounce(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number, Number]),
        __metadata("design:returntype", void 0)
    ], DebounceCalc, "addTo", null);
    describe('debounce', function () {
        it('正常運作', function (done) {
            var start = Date.now();
            var t = 0;
            var interval = setInterval(function () {
                DebounceCalc.addTo(0, 100)
                    .then(function (e) {
                    var end = Date.now();
                    var spend = end - start;
                    spend.should.greaterThanOrEqual(100);
                    done();
                });
                t++;
                if (t > 10)
                    clearInterval(interval);
            }, 10);
        });
        it('執行過程發生錯誤', function (done) {
            var t = 0;
            var interval = setInterval(function () {
                var p = DebounceCalc.addTo(0, -100);
                p.then(function (e) { return done(false); }).catch(function (e) { return done(); });
                t++;
                if (t > 10)
                    clearInterval(interval);
            });
        });
    });
    describe('isSame', function () {
        it('array完全一至', function () { return index_1.isEqual([1, 2, 3], [1, 2, 3], true).should.true(); });
        it('array某個值不同', function () { return index_1.isEqual([1, 2, 3], [1, 2, 5], true).should.false(); });
        it('array個數不同', function () { return index_1.isEqual([1, 2, 3], [1, 2], true).should.false(); });
        it('物件陣列某個值不同', function () { return index_1.isEqual({ a: [1, 2, 3] }, { a: [1, 2, 5] }, true).should.false(); });
        it('物件陣列相同', function () { return index_1.isEqual({ a: [1, 2, 3] }, { a: [1, 2, 3] }, true).should.true(); });
    });
});
//# sourceMappingURL=index.spec.js.map