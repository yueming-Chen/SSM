"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
require("should");
var cache_1 = require("./cache");
describe('cache', function () {
    var CacheCalc = (function () {
        function CacheCalc() {
            this.count = 0;
        }
        CacheCalc.prototype.addTo = function (from, to) {
            var sum = 0;
            for (var i = from; i <= to; i++) {
                sum += i;
                this.count++;
            }
            return sum;
        };
        return CacheCalc;
    }());
    __decorate([
        cache_1.cache(10),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number, Number]),
        __metadata("design:returntype", void 0)
    ], CacheCalc.prototype, "addTo", null);
    it("\u5FEB\u53D6\u6642\u9593\u5167\u53D6\u7528\u5FEB\u53D6\u8CC7\u6599", function () {
        var calc = new CacheCalc();
        calc.addTo(1, 10).should.equal(55);
        calc.count.should.equal(10);
        calc.addTo(1, 10).should.equal(55);
        calc.count.should.equal(10);
    });
    it('不同的參數不會採用相同的結果', function () {
        var calc = new CacheCalc();
        calc.addTo(11, 20).should.equal(155);
        calc.addTo(11, 21).should.equal(176);
        calc.count.should.equal(21);
    });
    it('快取在指定時間內會清除', function (done) {
        var calc = new CacheCalc();
        calc.addTo(21, 30).should.equal(255);
        setTimeout(function (e) {
            calc.addTo(21, 30).should.equal(255);
            calc.count.should.equal(20);
            done();
        }, 30);
    });
    var cnt = 0;
    function fn() { cnt++; }
    it('可以直接套用在執行函數時', function () {
        cache_1.cache(fn, 3000)();
        cache_1.cache(fn, 3000)();
        cache_1.cache(fn, 3000)();
        cnt.should.equal(1);
    });
});
//# sourceMappingURL=cache.spec.js.map