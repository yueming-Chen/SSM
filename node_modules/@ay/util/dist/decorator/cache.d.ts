/**
 * 執行函式的結果會快取，當N豪秒內又執行此函數且參數一致時會直接返回上次計算的結果
 * @param {number} cacheFn 快取函數
 * @param {number} wait 快取時間(毫秒)(預設3000ms)
 * @param {boolean} deep 檢查參數時是否深度檢查(預設不深度檢查)
 */
export declare function cache(cacheFn: Function, wait: number, deep: boolean): any;
/**
 * 執行函式的結果會快取，當N豪秒內又執行此函數且參數一致時會直接返回上次計算的結果
 * @param {number} cacheFn 快取函數
 * @param {number} wait 快取時間(毫秒)(預設3000ms)
 * @param {boolean} deep 檢查參數時是否深度檢查(預設不檢查)
 */
export declare function cache(cacheFn: Function, wait: number): any;
/**
 * 執行函式的結果會快取，當N豪秒內又執行此函數且參數一致時會直接返回上次計算的結果
 * @param {number} cacheFn 快取函數
 * @param {number} wait 快取時間(毫秒)(預設3000ms)
 * @param {boolean} deep 檢查參數時是否深度檢查(預設不檢查)
 */
export declare function cache(cacheFn: Function): any;
/**
 * [Function Decorator]
 * 執行函式的結果會快取，當N豪秒內又執行此函數且參數一致時會直接返回上次計算的結果
 * @param {number} wait 快取時間(毫秒)(預設3000ms)
 * @param {boolean} deep 檢查參數時是否深度檢查(預設不檢查)
 */
export declare function cache(wait: number, deep: boolean): any;
/**
 * [Function Decorator]
 * 執行函式的結果會快取，當N豪秒內又執行此函數且參數一致時會直接返回上次計算的結果
 * @param {number} wait 快取時間(毫秒)(預設3000ms)
 * @param {boolean} deep 檢查參數時是否深度檢查(預設不檢查)
 */
export declare function cache(wait: number): any;
/**
 * [Function Decorator]
 * 執行函式的結果會快取，當N豪秒內又執行此函數且參數一致時會直接返回上次計算的結果
 * @param {number} wait 快取時間(毫秒)(預設3000ms)
 * @param {boolean} deep 檢查參數時是否深度檢查(預設不檢查)
 */
export declare function cache(): any;
