"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var isEqual_1 = require("../isEqual");
/**
 * [Function Decorator]
 * 該函數如果沒有被在{wait}豪秒內再次呼叫，才真正執行該函數，函數回傳型態將改為 Promise
 * @param {number} wait 防彈跳時間(毫秒)(預設3000ms)
 * @param {boolean} deep 檢查參數時是否深度檢查(預設不深度檢查)
 */
function debounce(wait, deep) {
    if (wait === void 0) { wait = 300; }
    if (deep === void 0) { deep = false; }
    return function decorator(target, key, descriptor) {
        var _this = this;
        var func = descriptor.value;
        var caches = [];
        descriptor.value = function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            var cache = caches.find(function (cache) { return isEqual_1.isEqual(cache.params, params, deep); });
            if (cache === undefined) {
                cache = { params: params };
                caches.push(cache);
            }
            return new Promise(function (resolve, reject) {
                if (cache.timeout)
                    clearTimeout(cache.timeout);
                cache.timeout = setTimeout(function () {
                    cache.timeout = null;
                    try {
                        resolve(func.apply(_this, params.slice()));
                    }
                    catch (e) {
                        reject(e);
                    }
                }, wait);
            });
        };
        return descriptor;
    };
}
exports.debounce = debounce;
//# sourceMappingURL=debounce.js.map