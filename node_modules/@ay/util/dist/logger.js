"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Subject_1 = require("rxjs/Subject");
var moment = require("moment");
try {
    var colors = require('colors');
    colors.setTheme({
        log: 'grey',
        date: 'grey',
        info: 'green',
        warning: 'yellow',
        debug: 'blue',
        error: 'red'
    });
}
catch (e) {
}
var Logger = (function (_super) {
    __extends(Logger, _super);
    function Logger() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Logger.prototype.log = function (title, args) {
        this.next({ type: "log", title: title, args: args });
    };
    Logger.prototype.info = function (title, args) {
        this.next({ type: "info", title: title, args: args });
    };
    Logger.prototype.warning = function (title, args) {
        this.next({ type: "warning", title: title, args: args });
    };
    Logger.prototype.debug = function (title, args) {
        this.next({ type: "debug", title: title, args: args });
    };
    Logger.prototype.error = function (title, args) {
        this.next({ type: "error", title: title, args: args });
    };
    return Logger;
}(Subject_1.Subject));
exports.Logger = Logger;
exports.logger = new Logger();
exports.logger
    .subscribe(function (e) {
    var date = moment().format(" HH:mm");
    switch (e.type) {
        case "log":
            console.log((date + " LOG   ").bgWhite.black + ("".white) + " " + e.title);
            break;
        case "info":
            console.log((date + " INFO  ").bgGreen.black + ("".green) + " " + e.title);
            break;
        case "warning":
            console.log((date + " WARN  ").bgMagenta.white + ("".magenta) + " " + e.title);
            break;
        case "debug":
            console.log((date + " DEBUG ").bgYellow.black + ("".yellow) + " " + e.title);
            break;
        case "error":
            console.log((date + " ERROR ").bgRed.white + ("".red) + " " + e.title);
            break;
    }
});
//# sourceMappingURL=logger.js.map